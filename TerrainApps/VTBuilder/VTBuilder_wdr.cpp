//------------------------------------------------------------------------------
// Source code generated by wxDesigner from file: VTBuilder.wdr
// Do not modify this file, all changes will be lost!
//------------------------------------------------------------------------------

#if defined(__GNUG__) && !defined(NO_GCC_PRAGMA)
    #pragma implementation "VTBuilder_wdr.h"
#endif

// For compilers that support precompilation
#include "wx/wxprec.h"

#ifdef __BORLANDC__
    #pragma hdrstop
#endif

// Include private header
#include "VTBuilder_wdr.h"

#include <wx/intl.h>

// Euro sign hack of the year
#if wxUSE_UNICODE
    #define __WDR_EURO__ wxT("\u20ac")
#else
    #if defined(__WXMAC__)
        #define __WDR_EURO__ wxT("\xdb")
    #elif defined(__WXMSW__)
        #define __WDR_EURO__ wxT("\x80")
    #else
        #define __WDR_EURO__ wxT("\xa4")
    #endif
#endif

// Custom source
#include "NodeDlg.h"

// Implement window functions

wxSizer *ExtentDialogFunc( wxWindow *parent, bool call_fit, bool set_sizer )
{
    wxBoxSizer *item0 = new wxBoxSizer( wxVERTICAL );

    wxBoxSizer *item1 = new wxBoxSizer( wxHORIZONTAL );

    wxStaticBox *item3 = new wxStaticBox( parent, -1, _("Extents") );
    wxStaticBoxSizer *item2 = new wxStaticBoxSizer( item3, wxVERTICAL );

    wxBoxSizer *item4 = new wxBoxSizer( wxHORIZONTAL );

    wxStaticText *item5 = new wxStaticText( parent, ID_TEXT, _("North"), wxDefaultPosition, wxDefaultSize, 0 );
    item4->Add( item5, 0, wxALIGN_CENTER|wxALL, 5 );

    item2->Add( item4, 0, wxALIGN_CENTER|wxLEFT|wxRIGHT|wxTOP, 0 );

    wxBoxSizer *item6 = new wxBoxSizer( wxHORIZONTAL );

    wxTextCtrl *item7 = new wxTextCtrl( parent, ID_EXTENT_N, wxT(""), wxDefaultPosition, wxDefaultSize, wxTE_PROCESS_ENTER );
    item6->Add( item7, 0, wxALIGN_CENTER|wxLEFT|wxRIGHT|wxBOTTOM, 5 );

    item2->Add( item6, 0, wxALIGN_CENTER|wxLEFT|wxRIGHT, 5 );

    wxBoxSizer *item8 = new wxBoxSizer( wxHORIZONTAL );

    wxStaticText *item9 = new wxStaticText( parent, ID_TEXT, _("West"), wxDefaultPosition, wxDefaultSize, 0 );
    item8->Add( item9, 0, wxALIGN_CENTER|wxALL, 5 );

    wxTextCtrl *item10 = new wxTextCtrl( parent, ID_EXTENT_W, wxT(""), wxDefaultPosition, wxDefaultSize, wxTE_PROCESS_ENTER );
    item8->Add( item10, 0, wxALIGN_CENTER|wxALL, 5 );

    item8->Add( 10, 10, 0, wxALIGN_CENTER|wxALL, 5 );

    wxTextCtrl *item11 = new wxTextCtrl( parent, ID_EXTENT_E, wxT(""), wxDefaultPosition, wxDefaultSize, wxTE_PROCESS_ENTER );
    item8->Add( item11, 0, wxALIGN_CENTER|wxALL, 5 );

    wxStaticText *item12 = new wxStaticText( parent, ID_TEXT, _("East"), wxDefaultPosition, wxDefaultSize, 0 );
    item8->Add( item12, 0, wxALIGN_CENTER|wxALL, 5 );

    item2->Add( item8, 0, wxALIGN_CENTER|wxLEFT|wxRIGHT, 5 );

    wxBoxSizer *item13 = new wxBoxSizer( wxHORIZONTAL );

    wxTextCtrl *item14 = new wxTextCtrl( parent, ID_EXTENT_S, wxT(""), wxDefaultPosition, wxDefaultSize, wxTE_PROCESS_ENTER );
    item13->Add( item14, 0, wxALIGN_CENTER|wxLEFT|wxRIGHT|wxTOP, 5 );

    item2->Add( item13, 0, wxALIGN_CENTER|wxLEFT|wxRIGHT, 5 );

    wxBoxSizer *item15 = new wxBoxSizer( wxHORIZONTAL );

    wxStaticText *item16 = new wxStaticText( parent, ID_TEXT, _("South"), wxDefaultPosition, wxDefaultSize, 0 );
    item15->Add( item16, 0, wxALIGN_CENTER|wxALL, 5 );

    item2->Add( item15, 0, wxALIGN_CENTER, 5 );

    wxCheckBox *item17 = new wxCheckBox( parent, ID_DMS, _("Display coordinates as Degrees-Minutes-Seconds"), wxDefaultPosition, wxDefaultSize, 0 );
    item2->Add( item17, 0, wxALIGN_CENTER|wxALL, 5 );

    item1->Add( item2, 0, wxALIGN_CENTER|wxLEFT|wxRIGHT|wxTOP, 5 );

    wxBoxSizer *item18 = new wxBoxSizer( wxVERTICAL );

    wxButton *item19 = new wxButton( parent, wxID_OK, _("OK"), wxDefaultPosition, wxDefaultSize, 0 );
    item18->Add( item19, 0, wxALIGN_CENTER|wxALL, 5 );

    wxButton *item20 = new wxButton( parent, wxID_CANCEL, _("Cancel"), wxDefaultPosition, wxDefaultSize, 0 );
    item18->Add( item20, 0, wxALIGN_CENTER|wxALL, 5 );

    item1->Add( item18, 0, wxALIGN_CENTER|wxALL, 5 );

    item0->Add( item1, 0, wxALIGN_CENTER|wxALL, 5 );

    wxBoxSizer *item21 = new wxBoxSizer( wxHORIZONTAL );

    wxStaticText *item22 = new wxStaticText( parent, ID_TEXT, _("Origin and Size:"), wxDefaultPosition, wxDefaultSize, 0 );
    item21->Add( item22, 0, wxALIGN_CENTER|wxALL, 5 );

    wxTextCtrl *item23 = new wxTextCtrl( parent, ID_EXTENT_ALL, wxT(""), wxDefaultPosition, wxSize(310,-1), 0 );
    item21->Add( item23, 1, wxALIGN_CENTER|wxALL, 5 );

    item0->Add( item21, 0, wxGROW|wxALIGN_CENTER_VERTICAL|wxLEFT|wxRIGHT|wxBOTTOM, 5 );

    if (set_sizer)
    {
        parent->SetSizer( item0 );
        if (call_fit)
            item0->SetSizeHints( parent );
    }
    
    return item0;
}

wxSizer *RawDialogFunc( wxWindow *parent, bool call_fit, bool set_sizer )
{
    wxBoxSizer *item0 = new wxBoxSizer( wxVERTICAL );

    wxGridSizer *item1 = new wxGridSizer( 2, 0, 0 );

    wxStaticText *item2 = new wxStaticText( parent, ID_TEXT, _("Bytes per sample"), wxDefaultPosition, wxDefaultSize, 0 );
    item1->Add( item2, 0, wxALIGN_RIGHT|wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    wxTextCtrl *item3 = new wxTextCtrl( parent, ID_BYTES, wxT(""), wxDefaultPosition, wxSize(80,-1), 0 );
    item1->Add( item3, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    wxStaticText *item4 = new wxStaticText( parent, ID_TEXT, _("Width"), wxDefaultPosition, wxDefaultSize, 0 );
    item1->Add( item4, 0, wxALIGN_RIGHT|wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    wxTextCtrl *item5 = new wxTextCtrl( parent, ID_WIDTH, wxT(""), wxDefaultPosition, wxSize(80,-1), 0 );
    item1->Add( item5, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    wxStaticText *item6 = new wxStaticText( parent, ID_TEXT, _("Height"), wxDefaultPosition, wxDefaultSize, 0 );
    item1->Add( item6, 0, wxALIGN_RIGHT|wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    wxTextCtrl *item7 = new wxTextCtrl( parent, ID_HEIGHT, wxT(""), wxDefaultPosition, wxSize(80,-1), 0 );
    item1->Add( item7, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    wxRadioButton *item8 = new wxRadioButton( parent, ID_LITTLE_ENDIAN, _("Little Endian"), wxDefaultPosition, wxDefaultSize, wxRB_GROUP );
    item1->Add( item8, 0, wxALIGN_RIGHT|wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    wxRadioButton *item9 = new wxRadioButton( parent, ID_BIG_ENDIAN, _("Big Endian  "), wxDefaultPosition, wxDefaultSize, 0 );
    item1->Add( item9, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    wxStaticText *item10 = new wxStaticText( parent, ID_TEXT, _("Vertical units in meters"), wxDefaultPosition, wxDefaultSize, 0 );
    item1->Add( item10, 0, wxALIGN_RIGHT|wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    wxTextCtrl *item11 = new wxTextCtrl( parent, ID_VUNITS, wxT(""), wxDefaultPosition, wxSize(80,-1), 0 );
    item1->Add( item11, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    item0->Add( item1, 0, wxALIGN_CENTER, 5 );

    wxStaticBox *item13 = new wxStaticBox( parent, -1, _("Coordinate Reference System (CRS)") );
    wxStaticBoxSizer *item12 = new wxStaticBoxSizer( item13, wxVERTICAL );

    wxRadioButton *item14 = new wxRadioButton( parent, ID_CRS_SIMPLE, _("Simple meters (UTM zone 1)"), wxDefaultPosition, wxDefaultSize, wxRB_GROUP );
    item12->Add( item14, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    wxRadioButton *item15 = new wxRadioButton( parent, ID_CRS_CURRENT, _("Use current"), wxDefaultPosition, wxDefaultSize, 0 );
    item12->Add( item15, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    wxBoxSizer *item16 = new wxBoxSizer( wxHORIZONTAL );

    wxRadioButton *item17 = new wxRadioButton( parent, ID_CRS_EXACT, _("Enter exact CRS:"), wxDefaultPosition, wxDefaultSize, 0 );
    item16->Add( item17, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    wxButton *item18 = new wxButton( parent, ID_CRS, _("CRS"), wxDefaultPosition, wxDefaultSize, 0 );
    item16->Add( item18, 0, wxALIGN_CENTER|wxLEFT|wxRIGHT|wxBOTTOM, 5 );

    item12->Add( item16, 0, wxALIGN_CENTER_VERTICAL, 5 );

    item0->Add( item12, 0, wxGROW|wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    wxStaticBox *item20 = new wxStaticBox( parent, -1, _("Extents") );
    wxStaticBoxSizer *item19 = new wxStaticBoxSizer( item20, wxVERTICAL );

    wxBoxSizer *item21 = new wxBoxSizer( wxHORIZONTAL );

    wxRadioButton *item22 = new wxRadioButton( parent, ID_EXT_SPACING, _("Based on grid spacing:"), wxDefaultPosition, wxDefaultSize, wxRB_GROUP );
    item21->Add( item22, 0, wxALIGN_CENTER|wxALL, 5 );

    wxTextCtrl *item23 = new wxTextCtrl( parent, ID_SPACING, wxT(""), wxDefaultPosition, wxSize(80,-1), 0 );
    item21->Add( item23, 0, wxALIGN_CENTER|wxALL, 5 );

    item19->Add( item21, 0, wxALIGN_CENTER_VERTICAL, 5 );

    wxBoxSizer *item24 = new wxBoxSizer( wxHORIZONTAL );

    wxRadioButton *item25 = new wxRadioButton( parent, ID_EXT_EXACT, _("Enter exact extents: "), wxDefaultPosition, wxDefaultSize, 0 );
    item24->Add( item25, 0, wxALIGN_CENTER|wxALL, 5 );

    wxButton *item26 = new wxButton( parent, ID_EXTENTS, _("Extents"), wxDefaultPosition, wxDefaultSize, 0 );
    item24->Add( item26, 0, wxALIGN_CENTER|wxLEFT|wxRIGHT|wxBOTTOM, 5 );

    item19->Add( item24, 0, wxALIGN_CENTER_VERTICAL, 5 );

    item0->Add( item19, 0, wxGROW|wxALIGN_CENTER_VERTICAL|wxLEFT|wxRIGHT|wxBOTTOM, 5 );

    wxBoxSizer *item27 = new wxBoxSizer( wxHORIZONTAL );

    wxButton *item28 = new wxButton( parent, wxID_OK, _("OK"), wxDefaultPosition, wxDefaultSize, 0 );
    item27->Add( item28, 0, wxALIGN_CENTER|wxALL, 5 );

    wxButton *item29 = new wxButton( parent, wxID_CANCEL, _("Cancel"), wxDefaultPosition, wxDefaultSize, 0 );
    item27->Add( item29, 0, wxALIGN_CENTER|wxALL, 5 );

    item0->Add( item27, 0, wxALIGN_CENTER|wxALL, 5 );

    if (set_sizer)
    {
        parent->SetSizer( item0 );
        if (call_fit)
            item0->SetSizeHints( parent );
    }
    
    return item0;
}

wxSizer *LayerPropDialogFunc( wxWindow *parent, bool call_fit, bool set_sizer )
{
    wxBoxSizer *item0 = new wxBoxSizer( wxVERTICAL );

    wxTextCtrl *item1 = new wxTextCtrl( parent, ID_PROPS, wxT(""), wxDefaultPosition, wxSize(300,100), wxTE_MULTILINE );
    item0->Add( item1, 1, wxGROW|wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    wxStaticBox *item3 = new wxStaticBox( parent, -1, _("Extents") );
    wxStaticBoxSizer *item2 = new wxStaticBoxSizer( item3, wxVERTICAL );

    wxBoxSizer *item4 = new wxBoxSizer( wxHORIZONTAL );

    wxStaticText *item5 = new wxStaticText( parent, ID_TEXT, _("Left"), wxDefaultPosition, wxDefaultSize, 0 );
    item4->Add( item5, 0, wxALIGN_CENTER|wxALL, 5 );

    wxTextCtrl *item6 = new wxTextCtrl( parent, ID_LEFT, wxT(""), wxDefaultPosition, wxSize(100,-1), 0 );
    item4->Add( item6, 0, wxALIGN_CENTER|wxALL, 0 );

    item2->Add( item4, 0, wxALIGN_RIGHT|wxALIGN_CENTER_VERTICAL|wxALL, 0 );

    wxBoxSizer *item7 = new wxBoxSizer( wxHORIZONTAL );

    wxStaticText *item8 = new wxStaticText( parent, ID_TEXT, _("Top"), wxDefaultPosition, wxDefaultSize, 0 );
    item7->Add( item8, 0, wxALIGN_CENTER|wxALL, 5 );

    wxTextCtrl *item9 = new wxTextCtrl( parent, ID_TOP, wxT(""), wxDefaultPosition, wxSize(100,-1), 0 );
    item7->Add( item9, 0, wxALIGN_CENTER|wxALL, 0 );

    item2->Add( item7, 0, wxALIGN_RIGHT|wxALIGN_CENTER_VERTICAL|wxALL, 0 );

    wxBoxSizer *item10 = new wxBoxSizer( wxHORIZONTAL );

    wxStaticText *item11 = new wxStaticText( parent, ID_TEXT, _("Right"), wxDefaultPosition, wxDefaultSize, 0 );
    item10->Add( item11, 0, wxALIGN_CENTER|wxALL, 5 );

    wxTextCtrl *item12 = new wxTextCtrl( parent, ID_RIGHT, wxT(""), wxDefaultPosition, wxSize(100,-1), 0 );
    item10->Add( item12, 0, wxALIGN_CENTER|wxALL, 0 );

    item2->Add( item10, 0, wxALIGN_RIGHT|wxALIGN_CENTER_VERTICAL|wxALL, 0 );

    wxBoxSizer *item13 = new wxBoxSizer( wxHORIZONTAL );

    wxStaticText *item14 = new wxStaticText( parent, ID_TEXT, _("Bottom"), wxDefaultPosition, wxDefaultSize, 0 );
    item13->Add( item14, 0, wxALIGN_CENTER|wxALL, 5 );

    wxTextCtrl *item15 = new wxTextCtrl( parent, ID_BOTTOM, wxT(""), wxDefaultPosition, wxSize(100,-1), 0 );
    item13->Add( item15, 0, wxALIGN_CENTER|wxALL, 0 );

    item2->Add( item13, 0, wxALIGN_RIGHT|wxALIGN_CENTER_VERTICAL|wxALL, 0 );

    item0->Add( item2, 0, wxALIGN_CENTER|wxALL, 5 );

    wxBoxSizer *item16 = new wxBoxSizer( wxHORIZONTAL );

    wxButton *item17 = new wxButton( parent, wxID_OK, _("OK"), wxDefaultPosition, wxDefaultSize, 0 );
    item16->Add( item17, 0, wxALIGN_CENTER|wxALL, 5 );

    wxButton *item18 = new wxButton( parent, wxID_CANCEL, _("Cancel"), wxDefaultPosition, wxDefaultSize, 0 );
    item16->Add( item18, 0, wxALIGN_CENTER|wxALL, 5 );

    item0->Add( item16, 0, wxALIGN_CENTER|wxALL, 5 );

    if (set_sizer)
    {
        parent->SetSizer( item0 );
        if (call_fit)
            item0->SetSizeHints( parent );
    }
    
    return item0;
}

wxSizer *ImportVegFunc( wxWindow *parent, bool call_fit, bool set_sizer )
{
    wxBoxSizer *item0 = new wxBoxSizer( wxVERTICAL );

    wxBoxSizer *item1 = new wxBoxSizer( wxVERTICAL );

    wxStaticText *item2 = new wxStaticText( parent, ID_TEXT, _("Field to use:"), wxDefaultPosition, wxDefaultSize, 0 );
    item1->Add( item2, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    wxString *strs3 = (wxString*) NULL;
    wxComboBox *item3 = new wxComboBox( parent, ID_FIELD, wxT(""), wxDefaultPosition, wxDefaultSize, 0, strs3, wxCB_DROPDOWN|wxCB_READONLY );
    item1->Add( item3, 0, wxGROW|wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    item0->Add( item1, 0, wxGROW|wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    wxBoxSizer *item4 = new wxBoxSizer( wxVERTICAL );

    wxStaticText *item5 = new wxStaticText( parent, ID_TEXT, _("Interpretation of the field:"), wxDefaultPosition, wxDefaultSize, 0 );
    item4->Add( item5, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    wxRadioButton *item6 = new wxRadioButton( parent, ID_DENSITY, _("Density (0 to 1) (double)"), wxDefaultPosition, wxDefaultSize, 0 );
    item4->Add( item6, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    wxRadioButton *item7 = new wxRadioButton( parent, ID_BIOTYPE1, _("Biotype by name (string)"), wxDefaultPosition, wxDefaultSize, 0 );
    item4->Add( item7, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    wxRadioButton *item8 = new wxRadioButton( parent, ID_BIOTYPE2, _("Biotype by ID (integer)"), wxDefaultPosition, wxDefaultSize, 0 );
    item4->Add( item8, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    item0->Add( item4, 0, wxALIGN_CENTER|wxALL, 5 );

    wxBoxSizer *item9 = new wxBoxSizer( wxHORIZONTAL );

    wxButton *item10 = new wxButton( parent, wxID_OK, _("OK"), wxDefaultPosition, wxDefaultSize, 0 );
    item9->Add( item10, 0, wxALIGN_CENTER|wxALL, 5 );

    wxButton *item11 = new wxButton( parent, wxID_CANCEL, _("Cancel"), wxDefaultPosition, wxDefaultSize, 0 );
    item9->Add( item11, 0, wxALIGN_CENTER|wxALL, 5 );

    item0->Add( item9, 0, wxALIGN_CENTER|wxALL, 5 );

    if (set_sizer)
    {
        parent->SetSizer( item0 );
        if (call_fit)
            item0->SetSizeHints( parent );
    }
    
    return item0;
}

wxSizer *DistribVegFunc( wxWindow *parent, bool call_fit, bool set_sizer )
{
    wxBoxSizer *item0 = new wxBoxSizer( wxVERTICAL );

    wxFlexGridSizer *item1 = new wxFlexGridSizer( 2, 0, 0 );

    wxStaticText *item2 = new wxStaticText( parent, ID_TEXT, _("Grid spacing of sampling, in meters:"), wxDefaultPosition, wxDefaultSize, 0 );
    item1->Add( item2, 0, wxALIGN_RIGHT|wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    wxTextCtrl *item3 = new wxTextCtrl( parent, IDC_SAMPLING, wxT(""), wxDefaultPosition, wxSize(80,-1), 0 );
    item1->Add( item3, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    wxStaticText *item4 = new wxStaticText( parent, ID_TEXT, _("Artificial scarcity, set to 1.0 for full density:"), wxDefaultPosition, wxDefaultSize, 0 );
    item1->Add( item4, 0, wxALIGN_RIGHT|wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    wxTextCtrl *item5 = new wxTextCtrl( parent, IDC_SCARCITY, wxT(""), wxDefaultPosition, wxSize(80,-1), 0 );
    item1->Add( item5, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    item0->Add( item1, 0, wxALIGN_CENTER|wxLEFT|wxRIGHT|wxTOP, 5 );

    wxStaticBox *item7 = new wxStaticBox( parent, -1, _("Species") );
    wxStaticBoxSizer *item6 = new wxStaticBoxSizer( item7, wxVERTICAL );

    wxBoxSizer *item8 = new wxBoxSizer( wxHORIZONTAL );

    wxRadioButton *item9 = new wxRadioButton( parent, ID_SPECIES1, _("Single species:"), wxDefaultPosition, wxDefaultSize, wxRB_GROUP );
    item8->Add( item9, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    wxString *strs10 = (wxString*) NULL;
    wxChoice *item10 = new wxChoice( parent, ID_CHOICE_SPECIES, wxDefaultPosition, wxSize(200,-1), 0, strs10, 0 );
    item8->Add( item10, 0, wxALIGN_CENTER|wxALL, 5 );

    item6->Add( item8, 0, wxALIGN_CENTER_VERTICAL, 5 );

    wxBoxSizer *item11 = new wxBoxSizer( wxHORIZONTAL );

    wxRadioButton *item12 = new wxRadioButton( parent, ID_SPECIES2, _("Single biotype:"), wxDefaultPosition, wxDefaultSize, 0 );
    item11->Add( item12, 0, wxALIGN_CENTER|wxALL, 5 );

    wxString *strs13 = (wxString*) NULL;
    wxChoice *item13 = new wxChoice( parent, ID_CHOICE_BIOTYPE, wxDefaultPosition, wxSize(200,-1), 0, strs13, 0 );
    item11->Add( item13, 0, wxALIGN_CENTER|wxALL, 5 );

    item6->Add( item11, 0, wxALIGN_CENTER_VERTICAL, 5 );

    wxBoxSizer *item14 = new wxBoxSizer( wxHORIZONTAL );

    wxRadioButton *item15 = new wxRadioButton( parent, ID_SPECIES3, _("Biotype from layer:"), wxDefaultPosition, wxDefaultSize, 0 );
    item14->Add( item15, 0, wxALIGN_CENTER|wxALL, 5 );

    wxString *strs16 = (wxString*) NULL;
    wxChoice *item16 = new wxChoice( parent, ID_CHOICE_BIOTYPE_LAYER, wxDefaultPosition, wxSize(200,-1), 0, strs16, 0 );
    item14->Add( item16, 1, wxALIGN_CENTER|wxALL, 5 );

    item6->Add( item14, 0, wxGROW|wxALIGN_CENTER_VERTICAL, 5 );

    item0->Add( item6, 0, wxGROW|wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    wxStaticBox *item18 = new wxStaticBox( parent, -1, _("Density") );
    wxStaticBoxSizer *item17 = new wxStaticBoxSizer( item18, wxVERTICAL );

    wxBoxSizer *item19 = new wxBoxSizer( wxHORIZONTAL );

    wxRadioButton *item20 = new wxRadioButton( parent, ID_DENSITY1, _("Fixed density:"), wxDefaultPosition, wxDefaultSize, wxRB_GROUP );
    item19->Add( item20, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    wxTextCtrl *item21 = new wxTextCtrl( parent, ID_TEXT_FIXED_DENSITY, wxT(""), wxDefaultPosition, wxSize(80,-1), 0 );
    item19->Add( item21, 0, wxALIGN_CENTER|wxALL, 5 );

    wxStaticText *item22 = new wxStaticText( parent, ID_TEXT, _("plants per m2"), wxDefaultPosition, wxDefaultSize, 0 );
    item19->Add( item22, 0, wxALIGN_CENTER|wxALL, 5 );

    item17->Add( item19, 0, wxALIGN_CENTER_VERTICAL, 5 );

    wxRadioButton *item23 = new wxRadioButton( parent, ID_DENSITY2, _("Inherit from biotype"), wxDefaultPosition, wxDefaultSize, 0 );
    item17->Add( item23, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    wxBoxSizer *item24 = new wxBoxSizer( wxHORIZONTAL );

    wxRadioButton *item25 = new wxRadioButton( parent, ID_DENSITY3, _("Combine density from layer:"), wxDefaultPosition, wxDefaultSize, 0 );
    item24->Add( item25, 0, wxALIGN_CENTER|wxALL, 5 );

    wxString *strs26 = (wxString*) NULL;
    wxChoice *item26 = new wxChoice( parent, ID_CHOICE_DENSITY_LAYER, wxDefaultPosition, wxSize(200,-1), 0, strs26, 0 );
    item24->Add( item26, 1, wxALIGN_CENTER|wxALL, 5 );

    item17->Add( item24, 0, wxGROW|wxALIGN_CENTER_VERTICAL, 5 );

    item0->Add( item17, 0, wxGROW|wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    wxStaticBox *item28 = new wxStaticBox( parent, -1, _("Size") );
    wxStaticBoxSizer *item27 = new wxStaticBoxSizer( item28, wxVERTICAL );

    wxBoxSizer *item29 = new wxBoxSizer( wxHORIZONTAL );

    wxRadioButton *item30 = new wxRadioButton( parent, ID_SIZE1, _("Fixed size:"), wxDefaultPosition, wxDefaultSize, wxRB_GROUP );
    item29->Add( item30, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    wxTextCtrl *item31 = new wxTextCtrl( parent, ID_TEXT_FIXED_SIZE, wxT(""), wxDefaultPosition, wxSize(80,-1), 0 );
    item29->Add( item31, 0, wxALIGN_CENTER|wxALL, 5 );

    wxStaticText *item32 = new wxStaticText( parent, ID_TEXT, _("meters"), wxDefaultPosition, wxDefaultSize, 0 );
    item29->Add( item32, 0, wxALIGN_CENTER|wxALL, 5 );

    item27->Add( item29, 0, wxALIGN_CENTER_VERTICAL, 5 );

    wxBoxSizer *item33 = new wxBoxSizer( wxHORIZONTAL );

    wxRadioButton *item34 = new wxRadioButton( parent, ID_SIZE2, _("Randomize from:"), wxDefaultPosition, wxDefaultSize, 0 );
    item33->Add( item34, 0, wxALIGN_CENTER|wxALL, 5 );

    wxSpinCtrl *item35 = new wxSpinCtrl( parent, ID_SPIN_RANDOM_FROM, wxT("0"), wxDefaultPosition, wxSize(60,-1), 0, 0, 100, 0 );
    item33->Add( item35, 0, wxALIGN_CENTER|wxALL, 5 );

    wxStaticText *item36 = new wxStaticText( parent, ID_TEXT, _("to"), wxDefaultPosition, wxDefaultSize, 0 );
    item33->Add( item36, 0, wxALIGN_CENTER|wxALL, 5 );

    wxSpinCtrl *item37 = new wxSpinCtrl( parent, ID_SPIN_RANDOM_TO, wxT("0"), wxDefaultPosition, wxSize(60,-1), 0, 0, 100, 0 );
    item33->Add( item37, 0, wxALIGN_CENTER|wxALL, 5 );

    wxStaticText *item38 = new wxStaticText( parent, ID_TEXT, _("percent of maximum"), wxDefaultPosition, wxDefaultSize, 0 );
    item33->Add( item38, 0, wxALIGN_CENTER|wxALL, 5 );

    item27->Add( item33, 0, wxALIGN_CENTER_VERTICAL, 5 );

    item0->Add( item27, 0, wxGROW|wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    wxBoxSizer *item39 = new wxBoxSizer( wxHORIZONTAL );

    wxButton *item40 = new wxButton( parent, wxID_OK, _("OK"), wxDefaultPosition, wxDefaultSize, 0 );
    item39->Add( item40, 0, wxALIGN_CENTER|wxALL, 5 );

    wxButton *item41 = new wxButton( parent, wxID_CANCEL, _("Cancel"), wxDefaultPosition, wxDefaultSize, 0 );
    item39->Add( item41, 0, wxALIGN_CENTER|wxALL, 5 );

    item0->Add( item39, 0, wxALIGN_CENTER|wxALL, 5 );

    if (set_sizer)
    {
        parent->SetSizer( item0 );
        if (call_fit)
            item0->SetSizeHints( parent );
    }
    
    return item0;
}

wxSizer *TowerDialogFunc( wxWindow *parent, bool call_fit, bool set_sizer )
{
    wxBoxSizer *item0 = new wxBoxSizer( wxVERTICAL );

    wxFlexGridSizer *item1 = new wxFlexGridSizer( 2, 0, 0 );

    wxStaticText *item2 = new wxStaticText( parent, ID_TEXT, _("Tower Position"), wxDefaultPosition, wxDefaultSize, 0 );
    item1->Add( item2, 0, wxALIGN_CENTER|wxALL, 5 );

    wxTextCtrl *item3 = new wxTextCtrl( parent, ID_TOWER_XY, wxT(""), wxDefaultPosition, wxSize(150,-1), 0 );
    item1->Add( item3, 0, wxALIGN_CENTER|wxALL, 5 );

    wxStaticText *item4 = new wxStaticText( parent, ID_TEXT, _("Tower Type"), wxDefaultPosition, wxDefaultSize, 0 );
    item1->Add( item4, 0, wxALIGN_CENTER|wxALL, 5 );

    wxString *strs5 = (wxString*) NULL;
    wxChoice *item5 = new wxChoice( parent, ID_TOWER_TYPE, wxDefaultPosition, wxSize(150,-1), 0, strs5, 0 );
    item1->Add( item5, 0, wxALIGN_CENTER|wxALL, 5 );

    wxStaticText *item6 = new wxStaticText( parent, ID_TEXT, _("Tower Material"), wxDefaultPosition, wxDefaultSize, 0 );
    item1->Add( item6, 0, wxALIGN_CENTER|wxALL, 5 );

    wxString *strs7 = (wxString*) NULL;
    wxChoice *item7 = new wxChoice( parent, ID_TOWER_MATERIAL, wxDefaultPosition, wxSize(150,-1), 0, strs7, 0 );
    item1->Add( item7, 0, wxALIGN_CENTER|wxALL, 5 );

    item0->Add( item1, 0, wxALIGN_CENTER|wxALL, 5 );

    wxCheckBox *item8 = new wxCheckBox( parent, ID_TOWER_ELEV, _("Tower Elevated"), wxDefaultPosition, wxDefaultSize, 0 );
    item0->Add( item8, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    wxBoxSizer *item9 = new wxBoxSizer( wxHORIZONTAL );

    wxButton *item10 = new wxButton( parent, wxID_OK, _("OK"), wxDefaultPosition, wxDefaultSize, 0 );
    item9->Add( item10, 0, wxALIGN_CENTER|wxALL, 5 );

    wxButton *item11 = new wxButton( parent, wxID_CANCEL, _("Cancel"), wxDefaultPosition, wxDefaultSize, 0 );
    item9->Add( item11, 0, wxALIGN_CENTER|wxALL, 5 );

    item0->Add( item9, 0, wxALIGN_CENTER|wxALL, 5 );

    if (set_sizer)
    {
        parent->SetSizer( item0 );
        if (call_fit)
            item0->SetSizeHints( parent );
    }
    
    return item0;
}

wxSizer *RoadPropDialogFunc( wxWindow *parent, bool call_fit, bool set_sizer )
{
    wxBoxSizer *item0 = new wxBoxSizer( wxVERTICAL );

    wxBoxSizer *item1 = new wxBoxSizer( wxHORIZONTAL );

    wxFlexGridSizer *item2 = new wxFlexGridSizer( 2, 0, 0 );

    wxStaticText *item3 = new wxStaticText( parent, ID_TEXT, _("Number of Lanes"), wxDefaultPosition, wxDefaultSize, 0 );
    item2->Add( item3, 0, wxALIGN_CENTER|wxALL, 5 );

    wxTextCtrl *item4 = new wxTextCtrl( parent, ID_NUMLANES, wxT(""), wxDefaultPosition, wxSize(80,-1), 0 );
    item2->Add( item4, 0, wxGROW|wxALIGN_CENTER_VERTICAL|wxLEFT|wxRIGHT|wxTOP, 5 );

    wxStaticText *item5 = new wxStaticText( parent, ID_TEXT, _("Highway Name"), wxDefaultPosition, wxDefaultSize, 0 );
    item2->Add( item5, 0, wxALIGN_CENTER|wxALL, 5 );

    wxTextCtrl *item6 = new wxTextCtrl( parent, ID_HWYNAME, wxT(""), wxDefaultPosition, wxSize(80,-1), 0 );
    item2->Add( item6, 0, wxGROW|wxALIGN_CENTER_VERTICAL|wxLEFT|wxRIGHT|wxTOP, 5 );

    wxStaticText *item7 = new wxStaticText( parent, ID_TEXT, _("Sidewalk"), wxDefaultPosition, wxDefaultSize, 0 );
    item2->Add( item7, 0, wxALIGN_CENTER|wxALL, 5 );

    wxString *strs8 = (wxString*) NULL;
    wxChoice *item8 = new wxChoice( parent, ID_SIDEWALK, wxDefaultPosition, wxSize(100,-1), 0, strs8, 0 );
    item2->Add( item8, 0, wxALIGN_CENTER|wxLEFT|wxRIGHT|wxTOP, 5 );

    wxStaticText *item9 = new wxStaticText( parent, ID_TEXT, _("Parking"), wxDefaultPosition, wxDefaultSize, 0 );
    item2->Add( item9, 0, wxALIGN_CENTER|wxALL, 5 );

    wxString *strs10 = (wxString*) NULL;
    wxChoice *item10 = new wxChoice( parent, ID_PARKING, wxDefaultPosition, wxSize(100,-1), 0, strs10, 0 );
    item2->Add( item10, 0, wxALIGN_CENTER|wxLEFT|wxRIGHT|wxTOP, 5 );

    wxStaticText *item11 = new wxStaticText( parent, ID_TEXT, _("Margin"), wxDefaultPosition, wxDefaultSize, 0 );
    item2->Add( item11, 0, wxALIGN_CENTER|wxALL, 5 );

    wxString *strs12 = (wxString*) NULL;
    wxChoice *item12 = new wxChoice( parent, ID_MARGIN, wxDefaultPosition, wxSize(100,-1), 0, strs12, 0 );
    item2->Add( item12, 0, wxALIGN_CENTER|wxLEFT|wxRIGHT|wxTOP, 5 );

    wxStaticText *item13 = new wxStaticText( parent, ID_TEXT, _("Lane Width"), wxDefaultPosition, wxDefaultSize, 0 );
    item2->Add( item13, 0, wxALIGN_CENTER|wxALL, 5 );

    wxTextCtrl *item14 = new wxTextCtrl( parent, ID_LANE_WIDTH, wxT(""), wxDefaultPosition, wxSize(80,-1), 0 );
    item2->Add( item14, 0, wxALIGN_CENTER_VERTICAL|wxLEFT|wxRIGHT|wxTOP, 5 );

    wxStaticText *item15 = new wxStaticText( parent, ID_TEXT, _("Pavement Width"), wxDefaultPosition, wxDefaultSize, 0 );
    item2->Add( item15, 0, wxALIGN_CENTER|wxALL, 5 );

    wxTextCtrl *item16 = new wxTextCtrl( parent, ID_SIDEWALK_WIDTH, wxT(""), wxDefaultPosition, wxSize(80,-1), 0 );
    item2->Add( item16, 0, wxALIGN_CENTER_VERTICAL|wxLEFT|wxRIGHT|wxTOP, 5 );

    wxStaticText *item17 = new wxStaticText( parent, ID_TEXT, _("Curb Height"), wxDefaultPosition, wxDefaultSize, 0 );
    item2->Add( item17, 0, wxALIGN_CENTER|wxALL, 5 );

    wxTextCtrl *item18 = new wxTextCtrl( parent, ID_CURB_HEIGHT, wxT(""), wxDefaultPosition, wxSize(80,-1), 0 );
    item2->Add( item18, 0, wxALIGN_CENTER_VERTICAL|wxLEFT|wxRIGHT|wxTOP, 5 );

    wxStaticText *item19 = new wxStaticText( parent, ID_TEXT, _("Parking Width"), wxDefaultPosition, wxDefaultSize, 0 );
    item2->Add( item19, 0, wxALIGN_CENTER|wxALL, 5 );

    wxTextCtrl *item20 = new wxTextCtrl( parent, ID_PARKING_WIDTH, wxT(""), wxDefaultPosition, wxSize(80,-1), 0 );
    item2->Add( item20, 0, wxALIGN_CENTER_VERTICAL|wxLEFT|wxRIGHT|wxTOP, 5 );

    wxStaticText *item21 = new wxStaticText( parent, ID_TEXT, _("Hard Shoulder Width"), wxDefaultPosition, wxDefaultSize, 0 );
    item2->Add( item21, 0, wxALIGN_CENTER|wxALL, 5 );

    wxTextCtrl *item22 = new wxTextCtrl( parent, ID_MARGIN_WIDTH, wxT(""), wxDefaultPosition, wxSize(80,-1), 0 );
    item2->Add( item22, 0, wxALIGN_CENTER_VERTICAL|wxLEFT|wxRIGHT|wxTOP, 5 );

    item1->Add( item2, 0, wxALIGN_CENTER|wxALL, 5 );

    wxBoxSizer *item23 = new wxBoxSizer( wxVERTICAL );

    wxStaticText *item24 = new wxStaticText( parent, ID_TEXT, _("Surface Type:"), wxDefaultPosition, wxDefaultSize, 0 );
    item23->Add( item24, 0, wxALIGN_CENTER|wxALL, 5 );

    wxString *strs25 = (wxString*) NULL;
    wxListBox *item25 = new wxListBox( parent, ID_SURFTYPE, wxDefaultPosition, wxSize(100,100), 0, strs25, wxLB_SINGLE );
    item23->Add( item25, 1, wxGROW|wxALIGN_CENTER_VERTICAL|wxLEFT|wxRIGHT|wxBOTTOM, 5 );

    item1->Add( item23, 1, wxGROW|wxALIGN_CENTER_HORIZONTAL|wxALL, 5 );

    item0->Add( item1, 0, wxALIGN_CENTER|wxLEFT|wxRIGHT|wxTOP, 5 );

    wxBoxSizer *item26 = new wxBoxSizer( wxHORIZONTAL );

    wxButton *item27 = new wxButton( parent, wxID_OK, _("OK"), wxDefaultPosition, wxDefaultSize, 0 );
    item26->Add( item27, 0, wxALIGN_CENTER|wxALL, 5 );

    wxButton *item28 = new wxButton( parent, wxID_CANCEL, _("Cancel"), wxDefaultPosition, wxDefaultSize, 0 );
    item26->Add( item28, 0, wxALIGN_CENTER|wxALL, 5 );

    item0->Add( item26, 0, wxALIGN_CENTER|wxALL, 5 );

    if (set_sizer)
    {
        parent->SetSizer( item0 );
        if (call_fit)
            item0->SetSizeHints( parent );
    }
    
    return item0;
}

wxSizer *NodePropDialogFunc( wxWindow *parent, bool call_fit, bool set_sizer )
{
    wxBoxSizer *item0 = new wxBoxSizer( wxHORIZONTAL );

    wxBoxSizer *item1 = new wxBoxSizer( wxVERTICAL );

    wxFlexGridSizer *item2 = new wxFlexGridSizer( 2, 0, 0 );

    wxStaticText *item3 = new wxStaticText( parent, ID_TEXT, _("Intersection Type"), wxDefaultPosition, wxDefaultSize, 0 );
    item2->Add( item3, 0, wxALIGN_CENTER_HORIZONTAL|wxALL, 5 );

    wxString *strs4 = (wxString*) NULL;
    wxListBox *item4 = new wxListBox( parent, ID_INTTYPE, wxDefaultPosition, wxSize(115,130), 0, strs4, wxLB_SINGLE );
    item2->Add( item4, 0, wxALIGN_CENTER|wxALL, 5 );

    wxStaticText *item5 = new wxStaticText( parent, ID_TEXT, _("Road Number"), wxDefaultPosition, wxDefaultSize, 0 );
    item2->Add( item5, 0, wxALIGN_CENTER_HORIZONTAL|wxALL, 5 );

    wxString *strs6 = (wxString*) NULL;
    wxListBox *item6 = new wxListBox( parent, ID_ROADNUM, wxDefaultPosition, wxSize(70,70), 0, strs6, wxLB_SINGLE );
    item2->Add( item6, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    wxStaticText *item7 = new wxStaticText( parent, ID_TEXT, _("Behavior"), wxDefaultPosition, wxDefaultSize, 0 );
    item2->Add( item7, 0, wxALIGN_CENTER_HORIZONTAL|wxALL, 5 );

    wxString *strs8 = (wxString*) NULL;
    wxListBox *item8 = new wxListBox( parent, ID_BEHAVIOR, wxDefaultPosition, wxSize(120,55), 0, strs8, wxLB_SINGLE );
    item2->Add( item8, 0, wxALIGN_CENTER|wxALL, 5 );

    item1->Add( item2, 0, wxALIGN_CENTER|wxALL, 5 );

    wxBoxSizer *item9 = new wxBoxSizer( wxHORIZONTAL );

    wxButton *item10 = new wxButton( parent, wxID_OK, _("OK"), wxDefaultPosition, wxDefaultSize, 0 );
    item9->Add( item10, 0, wxALIGN_CENTER|wxALL, 5 );

    wxButton *item11 = new wxButton( parent, wxID_CANCEL, _("Cancel"), wxDefaultPosition, wxDefaultSize, 0 );
    item9->Add( item11, 0, wxALIGN_CENTER|wxALL, 5 );

    item1->Add( item9, 0, wxALIGN_CENTER|wxALL, 5 );

    item0->Add( item1, 0, wxGROW|wxALIGN_CENTER_HORIZONTAL|wxALL, 5 );

    wxStaticBox *item13 = new wxStaticBox( parent, -1, _("View") );
    wxStaticBoxSizer *item12 = new wxStaticBoxSizer( item13, wxVERTICAL );

    NodeDlgView *item14 = new NodeDlgView( parent, ID_SCROLLED, wxDefaultPosition, wxSize(200,160), wxHSCROLL|wxVSCROLL );
    item14->SetScrollbars( 10, 10, 20, 100, 0, 0 );
    item12->Add( item14, 1, wxGROW|wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    item0->Add( item12, 1, wxGROW|wxALIGN_CENTER_HORIZONTAL|wxALL, 5 );

    if (set_sizer)
    {
        parent->SetSizer( item0 );
        if (call_fit)
            item0->SetSizeHints( parent );
    }
    
    return item0;
}

wxSizer *ResampleDialogFunc( wxWindow *parent, bool call_fit, bool set_sizer )
{
    wxBoxSizer *item0 = new wxBoxSizer( wxVERTICAL );

    wxStaticBox *item2 = new wxStaticBox( parent, -1, _("Output") );
    wxStaticBoxSizer *item1 = new wxStaticBoxSizer( item2, wxVERTICAL );

    wxRadioButton *item3 = new wxRadioButton( parent, ID_RADIO_CREATE_NEW, _("Create new layer"), wxDefaultPosition, wxDefaultSize, wxRB_GROUP );
    item1->Add( item3, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    wxBoxSizer *item4 = new wxBoxSizer( wxHORIZONTAL );

    wxRadioButton *item5 = new wxRadioButton( parent, ID_RADIO_TO_FILE, _("To file"), wxDefaultPosition, wxDefaultSize, 0 );
    item4->Add( item5, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    wxTextCtrl *item6 = new wxTextCtrl( parent, ID_TEXT_TO_FILE, wxT(""), wxDefaultPosition, wxSize(80,-1), 0 );
    item4->Add( item6, 1, wxALIGN_CENTER|wxALL, 5 );

    wxButton *item7 = new wxButton( parent, ID_DOTDOTDOT, _("..."), wxDefaultPosition, wxSize(24,-1), 0 );
    item7->SetFont( wxFont( 11, wxROMAN, wxNORMAL, wxBOLD ) );
    item4->Add( item7, 0, wxALIGN_CENTER|wxALL, 5 );

    item1->Add( item4, 0, wxGROW|wxALIGN_CENTER_VERTICAL, 5 );

    wxBoxSizer *item8 = new wxBoxSizer( wxHORIZONTAL );

    wxRadioButton *item9 = new wxRadioButton( parent, ID_RADIO_TO_TILES, _("To folder of Tiles"), wxDefaultPosition, wxDefaultSize, 0 );
    item8->Add( item9, 0, wxALIGN_CENTER_VERTICAL|wxLEFT|wxRIGHT|wxBOTTOM, 5 );

    wxTextCtrl *item10 = new wxTextCtrl( parent, ID_TEXT_TILE_INFO, wxT(""), wxDefaultPosition, wxSize(100,-1), wxTE_READONLY );
    item8->Add( item10, 0, wxALIGN_CENTER|wxLEFT|wxRIGHT|wxBOTTOM, 5 );

    wxButton *item11 = new wxButton( parent, ID_TILE_OPTIONS, _("Tile Options"), wxDefaultPosition, wxDefaultSize, 0 );
    item8->Add( item11, 0, wxALIGN_CENTER|wxLEFT|wxRIGHT|wxBOTTOM, 5 );

    item1->Add( item8, 0, wxGROW|wxALIGN_CENTER_VERTICAL, 5 );

    wxBoxSizer *item12 = new wxBoxSizer( wxHORIZONTAL );

    item12->Add( 20, 20, 0, wxALIGN_CENTER|wxLEFT|wxRIGHT, 5 );

    wxCheckBox *item13 = new wxCheckBox( parent, ID_DERIVED_IMAGES, _("Also create derived image tiles"), wxDefaultPosition, wxDefaultSize, 0 );
    item12->Add( item13, 0, wxALIGN_CENTER|wxALL, 5 );

    wxButton *item14 = new wxButton( parent, ID_RENDERING_OPTIONS, _("Rendering options..."), wxDefaultPosition, wxDefaultSize, 0 );
    item12->Add( item14, 0, wxALIGN_CENTER|wxALL, 5 );

    item1->Add( item12, 0, wxALIGN_CENTER_VERTICAL, 5 );

    wxBoxSizer *item15 = new wxBoxSizer( wxHORIZONTAL );

    item15->Add( 20, 20, 0, wxALIGN_CENTER|wxLEFT|wxRIGHT, 5 );

    wxTextCtrl *item16 = new wxTextCtrl( parent, ID_TEXT_TO_IMAGE_FILE, wxT(""), wxDefaultPosition, wxSize(80,-1), 0 );
    item15->Add( item16, 1, wxALIGN_CENTER|wxALL, 5 );

    wxButton *item17 = new wxButton( parent, ID_DOTDOTDOT2, _("..."), wxDefaultPosition, wxSize(24,-1), 0 );
    item17->SetFont( wxFont( 11, wxROMAN, wxNORMAL, wxBOLD ) );
    item15->Add( item17, 0, wxALIGN_CENTER|wxLEFT|wxRIGHT, 5 );

    item1->Add( item15, 0, wxGROW|wxALIGN_CENTER_VERTICAL, 5 );

    item0->Add( item1, 0, wxGROW|wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    wxStaticBox *item19 = new wxStaticBox( parent, -1, _("Sampling") );
    wxStaticBoxSizer *item18 = new wxStaticBoxSizer( item19, wxVERTICAL );

    wxBoxSizer *item20 = new wxBoxSizer( wxHORIZONTAL );

    wxStaticText *item21 = new wxStaticText( parent, ID_TEXT, _("Grid spacing:"), wxDefaultPosition, wxDefaultSize, 0 );
    item20->Add( item21, 0, wxALIGN_CENTER|wxALL, 5 );

    wxTextCtrl *item22 = new wxTextCtrl( parent, ID_SPACINGX, wxT(""), wxDefaultPosition, wxSize(80,-1), 0 );
    item20->Add( item22, 1, wxALIGN_CENTER|wxALL, 5 );

    wxTextCtrl *item23 = new wxTextCtrl( parent, ID_SPACINGY, wxT(""), wxDefaultPosition, wxSize(80,-1), 0 );
    item20->Add( item23, 1, wxALIGN_CENTER|wxALL, 5 );

    item18->Add( item20, 0, wxGROW|wxALIGN_CENTER_VERTICAL, 5 );

    wxBoxSizer *item24 = new wxBoxSizer( wxHORIZONTAL );

    wxStaticText *item25 = new wxStaticText( parent, ID_TEXT, _("Grid size:"), wxDefaultPosition, wxDefaultSize, 0 );
    item24->Add( item25, 0, wxALIGN_CENTER|wxALL, 5 );

    wxTextCtrl *item26 = new wxTextCtrl( parent, ID_SIZEX, wxT(""), wxDefaultPosition, wxSize(60,-1), 0 );
    item24->Add( item26, 0, wxALIGN_CENTER|wxALL, 5 );

    wxTextCtrl *item27 = new wxTextCtrl( parent, ID_SIZEY, wxT(""), wxDefaultPosition, wxSize(60,-1), 0 );
    item24->Add( item27, 0, wxALIGN_CENTER|wxALL, 5 );

    item18->Add( item24, 0, wxALIGN_CENTER_VERTICAL, 5 );

    wxBoxSizer *item28 = new wxBoxSizer( wxHORIZONTAL );

    wxCheckBox *item29 = new wxCheckBox( parent, ID_CONSTRAIN, _("Size constraint: power of 2 plus 1 for terrain LOD"), wxDefaultPosition, wxDefaultSize, 0 );
    item28->Add( item29, 0, wxALIGN_CENTER|wxALL, 5 );

    item18->Add( item28, 0, wxALIGN_CENTER, 5 );

    wxBoxSizer *item30 = new wxBoxSizer( wxHORIZONTAL );

    wxButton *item31 = new wxButton( parent, ID_SMALLER, _("<< Smaller"), wxDefaultPosition, wxSize(73,-1), 0 );
    item30->Add( item31, 0, wxALIGN_CENTER|wxALL, 5 );

    wxButton *item32 = new wxButton( parent, ID_BIGGER, _(">> Bigger"), wxDefaultPosition, wxSize(70,-1), 0 );
    item30->Add( item32, 0, wxALIGN_CENTER|wxALL, 5 );

    item18->Add( item30, 0, wxALIGN_CENTER, 5 );

    item0->Add( item18, 0, wxGROW|wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    wxBoxSizer *item33 = new wxBoxSizer( wxVERTICAL );

    wxBoxSizer *item34 = new wxBoxSizer( wxHORIZONTAL );

    wxBoxSizer *item35 = new wxBoxSizer( wxVERTICAL );

    wxRadioButton *item36 = new wxRadioButton( parent, ID_FLOATS, _("Floating point"), wxDefaultPosition, wxDefaultSize, wxRB_GROUP );
    item35->Add( item36, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    wxRadioButton *item37 = new wxRadioButton( parent, ID_SHORTS, _("Short integer"), wxDefaultPosition, wxDefaultSize, 0 );
    item35->Add( item37, 0, wxALIGN_CENTER_VERTICAL|wxLEFT|wxRIGHT|wxBOTTOM, 5 );

    item34->Add( item35, 0, wxALIGN_CENTER, 5 );

    wxStaticText *item38 = new wxStaticText( parent, ID_TEXT, _("Vertical units:"), wxDefaultPosition, wxDefaultSize, 0 );
    item34->Add( item38, 0, wxALIGN_CENTER|wxALL, 5 );

    wxTextCtrl *item39 = new wxTextCtrl( parent, ID_VUNITS, wxT(""), wxDefaultPosition, wxSize(70,-1), 0 );
    item34->Add( item39, 0, wxALIGN_CENTER|wxALL, 5 );

    wxStaticText *item40 = new wxStaticText( parent, ID_TEXT, _("meters"), wxDefaultPosition, wxDefaultSize, 0 );
    item34->Add( item40, 0, wxALIGN_CENTER|wxALL, 5 );

    item33->Add( item34, 0, wxALIGN_CENTER, 5 );

    wxCheckBox *item41 = new wxCheckBox( parent, ID_FILL_GAPS, _("Fill gaps (NODATA) in the resampled grid with interpolated values"), wxDefaultPosition, wxDefaultSize, 0 );
    item33->Add( item41, 0, wxALIGN_CENTER|wxALL, 5 );

    item0->Add( item33, 0, wxGROW|wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    wxStaticBox *item43 = new wxStaticBox( parent, -1, _("Information") );
    wxStaticBoxSizer *item42 = new wxStaticBoxSizer( item43, wxVERTICAL );

    wxBoxSizer *item44 = new wxBoxSizer( wxHORIZONTAL );

    wxStaticText *item45 = new wxStaticText( parent, ID_TEXT, _("Size of sample area:"), wxDefaultPosition, wxDefaultSize, 0 );
    item44->Add( item45, 0, wxALIGN_CENTER|wxALL, 5 );

    wxTextCtrl *item46 = new wxTextCtrl( parent, ID_AREAX, wxT(""), wxDefaultPosition, wxSize(80,-1), wxTE_READONLY );
    item44->Add( item46, 1, wxALIGN_CENTER|wxALL, 5 );

    wxTextCtrl *item47 = new wxTextCtrl( parent, ID_AREAY, wxT(""), wxDefaultPosition, wxSize(80,-1), wxTE_READONLY );
    item44->Add( item47, 1, wxALIGN_CENTER|wxALL, 5 );

    item42->Add( item44, 0, wxGROW|wxALIGN_CENTER_VERTICAL, 5 );

    wxBoxSizer *item48 = new wxBoxSizer( wxHORIZONTAL );

    wxStaticText *item49 = new wxStaticText( parent, ID_TEXT, _("Estimated spacing of existing data:"), wxDefaultPosition, wxDefaultSize, 0 );
    item48->Add( item49, 0, wxALIGN_CENTER|wxALL, 5 );

    wxTextCtrl *item50 = new wxTextCtrl( parent, ID_ESTX, wxT(""), wxDefaultPosition, wxSize(60,-1), wxTE_READONLY );
    item48->Add( item50, 0, wxALIGN_CENTER|wxALL, 5 );

    wxTextCtrl *item51 = new wxTextCtrl( parent, ID_ESTY, wxT(""), wxDefaultPosition, wxSize(60,-1), wxTE_READONLY );
    item48->Add( item51, 0, wxALIGN_CENTER|wxALL, 5 );

    item42->Add( item48, 0, wxALIGN_CENTER_VERTICAL, 5 );

    item0->Add( item42, 0, wxGROW|wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    wxBoxSizer *item52 = new wxBoxSizer( wxHORIZONTAL );

    wxButton *item53 = new wxButton( parent, wxID_OK, _("OK"), wxDefaultPosition, wxDefaultSize, 0 );
    item52->Add( item53, 0, wxALIGN_CENTER|wxALL, 5 );

    wxButton *item54 = new wxButton( parent, wxID_CANCEL, _("Cancel"), wxDefaultPosition, wxDefaultSize, 0 );
    item52->Add( item54, 0, wxALIGN_CENTER|wxALL, 5 );

    item0->Add( item52, 0, wxALIGN_CENTER|wxALL, 5 );

    if (set_sizer)
    {
        parent->SetSizer( item0 );
        if (call_fit)
            item0->SetSizeHints( parent );
    }
    
    return item0;
}

wxSizer *SelectDialogFunc( wxWindow *parent, bool call_fit, bool set_sizer )
{
    wxBoxSizer *item0 = new wxBoxSizer( wxVERTICAL );

    wxStaticText *item1 = new wxStaticText( parent, ID_TEXT, _("Select all features which satisfy the condition:"), wxDefaultPosition, wxDefaultSize, 0 );
    item0->Add( item1, 0, wxALIGN_CENTER|wxALL, 5 );

    wxBoxSizer *item2 = new wxBoxSizer( wxHORIZONTAL );

    wxString *strs3 = (wxString*) NULL;
    wxListBox *item3 = new wxListBox( parent, ID_FIELD, wxDefaultPosition, wxSize(100,110), 0, strs3, wxLB_SINGLE );
    item2->Add( item3, 1, wxGROW|wxALIGN_CENTER_HORIZONTAL|wxALL, 5 );

    wxString *strs4 = (wxString*) NULL;
    wxChoice *item4 = new wxChoice( parent, ID_CONDITION, wxDefaultPosition, wxSize(50,-1), 0, strs4, 0 );
    item2->Add( item4, 0, wxALIGN_CENTER|wxALL, 5 );

    wxString *strs5 = (wxString*) NULL;
    wxComboBox *item5 = new wxComboBox( parent, ID_COMBO_VALUE, wxT(""), wxDefaultPosition, wxSize(180,-1), 0, strs5, wxCB_DROPDOWN );
    item2->Add( item5, 1, wxALIGN_CENTER|wxALL, 5 );

    item0->Add( item2, 1, wxGROW|wxALIGN_CENTER_VERTICAL|wxLEFT|wxRIGHT, 5 );

    wxBoxSizer *item6 = new wxBoxSizer( wxHORIZONTAL );

    wxButton *item7 = new wxButton( parent, wxID_OK, _("OK"), wxDefaultPosition, wxDefaultSize, 0 );
    item6->Add( item7, 0, wxALIGN_CENTER|wxALL, 5 );

    wxButton *item8 = new wxButton( parent, wxID_CANCEL, _("Cancel"), wxDefaultPosition, wxDefaultSize, 0 );
    item6->Add( item8, 0, wxALIGN_CENTER|wxALL, 5 );

    item0->Add( item6, 0, wxALIGN_CENTER|wxALL, 5 );

    if (set_sizer)
    {
        parent->SetSizer( item0 );
        if (call_fit)
            item0->SetSizeHints( parent );
    }
    
    return item0;
}

wxSizer *OptionsDialogFunc( wxWindow *parent, bool call_fit, bool set_sizer )
{
    wxBoxSizer *item0 = new wxBoxSizer( wxVERTICAL );

    wxBoxSizer *item1 = new wxBoxSizer( wxHORIZONTAL );

    wxCheckBox *item2 = new wxCheckBox( parent, ID_TOOLBAR, _("Show toolbar"), wxDefaultPosition, wxDefaultSize, 0 );
    item1->Add( item2, 0, wxALIGN_CENTER|wxALL, 5 );

    item0->Add( item1, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    wxStaticBox *item4 = new wxStaticBox( parent, -1, _("Status Bar") );
    wxStaticBoxSizer *item3 = new wxStaticBoxSizer( item4, wxVERTICAL );

    wxCheckBox *item5 = new wxCheckBox( parent, ID_MINUTES, _("Show minutes and seconds for degree values"), wxDefaultPosition, wxDefaultSize, 0 );
    item3->Add( item5, 0, wxALIGN_CENTER|wxALL, 5 );

    wxBoxSizer *item6 = new wxBoxSizer( wxHORIZONTAL );

    wxStaticText *item7 = new wxStaticText( parent, ID_TEXT, _("Show elevation values as:"), wxDefaultPosition, wxDefaultSize, 0 );
    item6->Add( item7, 0, wxALIGN_CENTER|wxALL, 5 );

    wxString *strs8 = (wxString*) NULL;
    wxChoice *item8 = new wxChoice( parent, ID_ELEVUNIT, wxDefaultPosition, wxSize(100,-1), 0, strs8, 0 );
    item6->Add( item8, 1, wxALIGN_CENTER|wxALL, 5 );

    item3->Add( item6, 0, wxGROW|wxALIGN_CENTER_VERTICAL, 5 );

    item0->Add( item3, 0, wxGROW|wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    wxStaticBox *item10 = new wxStaticBox( parent, -1, _("Elevation") );
    wxStaticBoxSizer *item9 = new wxStaticBoxSizer( item10, wxVERTICAL );

    wxRadioButton *item11 = new wxRadioButton( parent, ID_RADIO_OUTLINE_ONLY, _("Show outline only (faster, saves memory)"), wxDefaultPosition, wxDefaultSize, wxRB_GROUP );
    item9->Add( item11, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    wxRadioButton *item12 = new wxRadioButton( parent, ID_RADIO_COLOR, _("Artificial color by elevation value"), wxDefaultPosition, wxDefaultSize, 0 );
    item9->Add( item12, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    wxFlexGridSizer *item13 = new wxFlexGridSizer( 2, 0, 0 );

    item13->Add( 20, 5, 0, wxALIGN_CENTER|wxALL, 5 );

    wxButton *item14 = new wxButton( parent, ID_RENDER_OPTIONS, _("Rendering options..."), wxDefaultPosition, wxDefaultSize, 0 );
    item13->Add( item14, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    item13->Add( 20, 5, 0, wxALIGN_CENTER|wxALL, 5 );

    wxCheckBox *item15 = new wxCheckBox( parent, ID_CHECK_HIDE_UNKNOWN, _("Hide areas of unknown elevation"), wxDefaultPosition, wxDefaultSize, 0 );
    item13->Add( item15, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    item9->Add( item13, 0, wxGROW|wxALIGN_CENTER_VERTICAL, 5 );

    item0->Add( item9, 0, wxGROW|wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    wxBoxSizer *item16 = new wxBoxSizer( wxVERTICAL );

    wxCheckBox *item17 = new wxCheckBox( parent, ID_CHECK_SHOW_ROAD_WIDTH, _("Show roads with width"), wxDefaultPosition, wxDefaultSize, 0 );
    item16->Add( item17, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    wxCheckBox *item18 = new wxCheckBox( parent, ID_PATHNAMES, _("Show full pathnames in Layer View"), wxDefaultPosition, wxDefaultSize, 0 );
    item16->Add( item18, 0, wxALIGN_CENTER|wxALL, 5 );

    item0->Add( item16, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    wxBoxSizer *item19 = new wxBoxSizer( wxHORIZONTAL );

    wxButton *item20 = new wxButton( parent, wxID_OK, _("OK"), wxDefaultPosition, wxDefaultSize, 0 );
    item19->Add( item20, 0, wxALIGN_CENTER|wxALL, 5 );

    wxButton *item21 = new wxButton( parent, wxID_CANCEL, _("Cancel"), wxDefaultPosition, wxDefaultSize, 0 );
    item19->Add( item21, 0, wxALIGN_CENTER|wxALL, 5 );

    item0->Add( item19, 0, wxALIGN_CENTER|wxALL, 5 );

    if (set_sizer)
    {
        parent->SetSizer( item0 );
        if (call_fit)
            item0->SetSizeHints( parent );
    }
    
    return item0;
}

wxSizer *VegFieldsDialogFunc( wxWindow *parent, bool call_fit, bool set_sizer )
{
    wxBoxSizer *item0 = new wxBoxSizer( wxVERTICAL );

    wxStaticBox *item2 = new wxStaticBox( parent, -1, _("Species") );
    wxStaticBoxSizer *item1 = new wxStaticBoxSizer( item2, wxVERTICAL );

    wxBoxSizer *item3 = new wxBoxSizer( wxHORIZONTAL );

    wxRadioButton *item4 = new wxRadioButton( parent, ID_USE_SPECIES, _("Use species:"), wxDefaultPosition, wxDefaultSize, wxRB_GROUP );
    item3->Add( item4, 0, wxALIGN_CENTER|wxALL, 5 );

    wxString *strs5 = (wxString*) NULL;
    wxChoice *item5 = new wxChoice( parent, ID_SPECIES_CHOICE, wxDefaultPosition, wxSize(140,-1), 0, strs5, 0 );
    item3->Add( item5, 0, wxALIGN_CENTER|wxLEFT|wxRIGHT|wxTOP, 5 );

    item1->Add( item3, 0, wxALIGN_CENTER|wxTOP, 5 );

    wxBoxSizer *item6 = new wxBoxSizer( wxHORIZONTAL );

    wxRadioButton *item7 = new wxRadioButton( parent, ID_SPECIES_USE_FIELD, _("Use field:"), wxDefaultPosition, wxDefaultSize, 0 );
    item6->Add( item7, 0, wxALIGN_CENTER|wxALL, 5 );

    wxString *strs8 = (wxString*) NULL;
    wxChoice *item8 = new wxChoice( parent, ID_SPECIES_FIELD, wxDefaultPosition, wxSize(140,-1), 0, strs8, 0 );
    item6->Add( item8, 0, wxALIGN_CENTER|wxLEFT|wxRIGHT|wxTOP, 5 );

    item1->Add( item6, 0, wxALIGN_CENTER_VERTICAL, 5 );

    wxBoxSizer *item9 = new wxBoxSizer( wxVERTICAL );

    wxRadioButton *item10 = new wxRadioButton( parent, ID_SPECIES_ID, _("Species ID (integer)"), wxDefaultPosition, wxDefaultSize, wxRB_GROUP );
    item9->Add( item10, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    wxRadioButton *item11 = new wxRadioButton( parent, ID_SPECIES_NAME, _("Species Name (string)"), wxDefaultPosition, wxDefaultSize, 0 );
    item9->Add( item11, 0, wxALIGN_CENTER_VERTICAL|wxLEFT|wxRIGHT|wxBOTTOM, 5 );

    wxRadioButton *item12 = new wxRadioButton( parent, ID_COMMON_NAME, _("Common Name (string)"), wxDefaultPosition, wxDefaultSize, 0 );
    item9->Add( item12, 0, wxALIGN_CENTER_VERTICAL|wxLEFT|wxRIGHT|wxBOTTOM, 5 );

    wxRadioButton *item13 = new wxRadioButton( parent, ID_BIOTYPE_INT, _("BioType ID (integer)"), wxDefaultPosition, wxDefaultSize, 0 );
    item9->Add( item13, 0, wxALIGN_CENTER_VERTICAL|wxLEFT|wxRIGHT|wxBOTTOM, 5 );

    wxRadioButton *item14 = new wxRadioButton( parent, ID_BIOTYPE_STRING, _("BioType Name (string)"), wxDefaultPosition, wxDefaultSize, 0 );
    item9->Add( item14, 0, wxALIGN_CENTER_VERTICAL|wxLEFT|wxRIGHT|wxBOTTOM, 5 );

    item1->Add( item9, 0, wxALIGN_CENTER|wxLEFT|wxRIGHT|wxBOTTOM, 5 );

    item0->Add( item1, 0, wxGROW|wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    wxStaticBox *item16 = new wxStaticBox( parent, -1, _("Height") );
    wxStaticBoxSizer *item15 = new wxStaticBoxSizer( item16, wxVERTICAL );

    wxRadioButton *item17 = new wxRadioButton( parent, ID_HEIGHT_RANDOM, _("Randomize"), wxDefaultPosition, wxDefaultSize, wxRB_GROUP );
    item15->Add( item17, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    wxBoxSizer *item18 = new wxBoxSizer( wxHORIZONTAL );

    wxRadioButton *item19 = new wxRadioButton( parent, ID_HEIGHT_FIXED, _("Fixed:"), wxDefaultPosition, wxDefaultSize, 0 );
    item18->Add( item19, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    wxTextCtrl *item20 = new wxTextCtrl( parent, ID_HEIGHT_FIXED_VALUE, wxT(""), wxDefaultPosition, wxDefaultSize, 0 );
    item18->Add( item20, 0, wxALIGN_CENTER|wxALL, 5 );

    item15->Add( item18, 0, wxALIGN_CENTER_VERTICAL, 5 );

    wxBoxSizer *item21 = new wxBoxSizer( wxHORIZONTAL );

    wxRadioButton *item22 = new wxRadioButton( parent, ID_HEIGHT_USE_FIELD, _("Use field:"), wxDefaultPosition, wxDefaultSize, 0 );
    item21->Add( item22, 0, wxALIGN_CENTER|wxALL, 5 );

    wxString *strs23 = (wxString*) NULL;
    wxChoice *item23 = new wxChoice( parent, ID_HEIGHT_FIELD, wxDefaultPosition, wxSize(140,-1), 0, strs23, 0 );
    item21->Add( item23, 0, wxALIGN_CENTER|wxLEFT|wxRIGHT|wxBOTTOM, 5 );

    item15->Add( item21, 0, wxALIGN_CENTER_VERTICAL, 5 );

    item0->Add( item15, 0, wxGROW|wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    wxBoxSizer *item24 = new wxBoxSizer( wxHORIZONTAL );

    wxButton *item25 = new wxButton( parent, wxID_OK, _("OK"), wxDefaultPosition, wxDefaultSize, 0 );
    item24->Add( item25, 0, wxALIGN_CENTER|wxALL, 5 );

    wxButton *item26 = new wxButton( parent, wxID_CANCEL, _("Cancel"), wxDefaultPosition, wxDefaultSize, 0 );
    item24->Add( item26, 0, wxALIGN_CENTER|wxALL, 5 );

    item0->Add( item24, 0, wxALIGN_CENTER|wxALL, 5 );

    if (set_sizer)
    {
        parent->SetSizer( item0 );
        if (call_fit)
            item0->SetSizeHints( parent );
    }
    
    return item0;
}

wxSizer *ImportStructFunc( wxWindow *parent, bool call_fit, bool set_sizer )
{
    wxBoxSizer *item0 = new wxBoxSizer( wxVERTICAL );

    wxStaticText *item1 = new wxStaticText( parent, ID_TEXT, _("Structure Type:"), wxDefaultPosition, wxDefaultSize, 0 );
    item0->Add( item1, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    wxBoxSizer *item2 = new wxBoxSizer( wxVERTICAL );

    wxRadioButton *item3 = new wxRadioButton( parent, ID_TYPE_LINEAR, _("Linear (fences or walls)"), wxDefaultPosition, wxDefaultSize, wxRB_GROUP );
    item2->Add( item3, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    wxRadioButton *item4 = new wxRadioButton( parent, ID_TYPE_INSTANCE, _("Instances (external model references)"), wxDefaultPosition, wxDefaultSize, 0 );
    item2->Add( item4, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    wxBoxSizer *item5 = new wxBoxSizer( wxHORIZONTAL );

    item5->Add( 20, 20, 0, wxALIGN_CENTER, 5 );

    wxStaticText *item6 = new wxStaticText( parent, ID_TEXT, _("Filename field:"), wxDefaultPosition, wxDefaultSize, 0 );
    item5->Add( item6, 0, wxALIGN_CENTER|wxLEFT|wxRIGHT|wxBOTTOM, 5 );

    wxString *strs7 = (wxString*) NULL;
    wxChoice *item7 = new wxChoice( parent, ID_CHOICE_FILE_FIELD, wxDefaultPosition, wxSize(100,-1), 0, strs7, 0 );
    item5->Add( item7, 0, wxALIGN_CENTER|wxLEFT|wxRIGHT|wxBOTTOM, 5 );

    item2->Add( item5, 0, wxALIGN_CENTER_VERTICAL, 5 );

    wxRadioButton *item8 = new wxRadioButton( parent, ID_TYPE_CENTER, _("Buildings (parametric by center)"), wxDefaultPosition, wxDefaultSize, 0 );
    item2->Add( item8, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    wxRadioButton *item9 = new wxRadioButton( parent, ID_TYPE_FOOTPRINT, _("Buildings (parametric by footprint, polygon or closed polyline)"), wxDefaultPosition, wxDefaultSize, 0 );
    item2->Add( item9, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    wxBoxSizer *item10 = new wxBoxSizer( wxHORIZONTAL );

    item10->Add( 20, 20, 0, wxALIGN_CENTER, 5 );

    wxStaticText *item11 = new wxStaticText( parent, ID_TEXT, _("Height field:"), wxDefaultPosition, wxDefaultSize, 0 );
    item10->Add( item11, 0, wxALIGN_CENTER|wxALL, 5 );

    wxString *strs12 = (wxString*) NULL;
    wxChoice *item12 = new wxChoice( parent, ID_CHOICE_HEIGHT_FIELD, wxDefaultPosition, wxSize(100,-1), 0, strs12, 0 );
    item10->Add( item12, 0, wxALIGN_CENTER|wxLEFT|wxRIGHT|wxBOTTOM, 5 );

    wxString strs13[] = 
    {
        _("Stories"), 
        _("Meters"), 
        _("Feet"), 
        _("Meters (single story)"), 
        _("Feet (single story)")
    };
    wxChoice *item13 = new wxChoice( parent, ID_CHOICE_HEIGHT_TYPE, wxDefaultPosition, wxSize(80,-1), 5, strs13, 0 );
    item10->Add( item13, 0, wxALIGN_CENTER|wxLEFT|wxRIGHT|wxBOTTOM, 5 );

    item2->Add( item10, 0, wxALIGN_CENTER_VERTICAL, 5 );

    wxBoxSizer *item14 = new wxBoxSizer( wxHORIZONTAL );

    item14->Add( 20, 20, 0, wxALIGN_CENTER, 5 );

    wxStaticText *item15 = new wxStaticText( parent, ID_TEXT, _("Color:"), wxDefaultPosition, wxDefaultSize, 0 );
    item14->Add( item15, 0, wxALIGN_CENTER|wxALL, 5 );

    item2->Add( item14, 0, wxALIGN_CENTER_VERTICAL, 5 );

    wxBoxSizer *item16 = new wxBoxSizer( wxHORIZONTAL );

    item16->Add( 20, 20, 0, wxALIGN_CENTER, 5 );

    wxRadioButton *item17 = new wxRadioButton( parent, ID_RADIO_COLOR_DEFAULT, _("Default"), wxDefaultPosition, wxDefaultSize, wxRB_GROUP );
    item16->Add( item17, 0, wxALIGN_CENTER|wxALL, 5 );

    item2->Add( item16, 0, wxALIGN_CENTER_VERTICAL, 5 );

    wxBoxSizer *item18 = new wxBoxSizer( wxHORIZONTAL );

    item18->Add( 20, 20, 0, wxALIGN_CENTER, 5 );

    wxRadioButton *item19 = new wxRadioButton( parent, ID_RADIO_COLOR_FIXED, _("Building:"), wxDefaultPosition, wxDefaultSize, 0 );
    item18->Add( item19, 0, wxALIGN_CENTER|wxALL, 5 );

    wxStaticBitmap *item20 = new wxStaticBitmap( parent, ID_COLOR3, MyBitmapsFunc( 0 ), wxDefaultPosition, wxDefaultSize );
    item18->Add( item20, 0, wxALIGN_CENTER|wxLEFT|wxTOP|wxBOTTOM, 5 );

    wxButton *item21 = new wxButton( parent, ID_SET_COLOR1, _("Set"), wxDefaultPosition, wxSize(40,-1), 0 );
    item18->Add( item21, 0, wxALIGN_CENTER|wxLEFT|wxRIGHT, 5 );

    wxStaticText *item22 = new wxStaticText( parent, ID_TEXT, _("Roof:"), wxDefaultPosition, wxDefaultSize, 0 );
    item18->Add( item22, 0, wxALIGN_CENTER|wxALL, 5 );

    wxStaticBitmap *item23 = new wxStaticBitmap( parent, ID_COLOR4, MyBitmapsFunc( 0 ), wxDefaultPosition, wxDefaultSize );
    item18->Add( item23, 0, wxALIGN_CENTER|wxLEFT|wxTOP|wxBOTTOM, 5 );

    wxButton *item24 = new wxButton( parent, ID_SET_COLOR2, _("Set"), wxDefaultPosition, wxSize(40,-1), 0 );
    item18->Add( item24, 0, wxALIGN_CENTER|wxLEFT|wxRIGHT, 5 );

    item2->Add( item18, 0, wxALIGN_CENTER_VERTICAL, 5 );

    wxBoxSizer *item25 = new wxBoxSizer( wxHORIZONTAL );

    item25->Add( 20, 20, 0, wxALIGN_CENTER, 5 );

    wxStaticText *item26 = new wxStaticText( parent, ID_TEXT, _("Roof type:"), wxDefaultPosition, wxDefaultSize, 0 );
    item25->Add( item26, 0, wxALIGN_CENTER|wxALL, 5 );

    item2->Add( item25, 0, wxALIGN_CENTER_VERTICAL, 5 );

    wxBoxSizer *item27 = new wxBoxSizer( wxHORIZONTAL );

    item27->Add( 20, 20, 0, wxALIGN_CENTER, 5 );

    wxRadioButton *item28 = new wxRadioButton( parent, ID_RADIO_ROOF_DEFAULT, _("Default"), wxDefaultPosition, wxDefaultSize, wxRB_GROUP );
    item27->Add( item28, 0, wxALIGN_CENTER|wxALL, 5 );

    item2->Add( item27, 0, wxALIGN_CENTER_VERTICAL, 5 );

    wxBoxSizer *item29 = new wxBoxSizer( wxHORIZONTAL );

    item29->Add( 20, 20, 0, wxALIGN_CENTER, 5 );

    wxRadioButton *item30 = new wxRadioButton( parent, ID_RADIO_ROOF_SINGLE, _("Single type:"), wxDefaultPosition, wxDefaultSize, 0 );
    item29->Add( item30, 0, wxALIGN_CENTER|wxALL, 5 );

    wxString strs31[] = 
    {
        _("Flat"), 
        _("Shed"), 
        _("Gable"), 
        _("Hip")
    };
    wxChoice *item31 = new wxChoice( parent, ID_CHOICE_ROOF_TYPE, wxDefaultPosition, wxSize(100,-1), 4, strs31, 0 );
    item29->Add( item31, 0, wxALIGN_CENTER|wxLEFT|wxRIGHT|wxBOTTOM, 5 );

    wxStaticText *item32 = new wxStaticText( parent, ID_TEXT, _("Slope:"), wxDefaultPosition, wxDefaultSize, 0 );
    item29->Add( item32, 0, wxALIGN_CENTER|wxALL, 5 );

    wxSpinCtrl *item33 = new wxSpinCtrl( parent, ID_SLOPECNTR, wxT("15"), wxDefaultPosition, wxSize(55,-1), 0, 1, 89, 15 );
    item29->Add( item33, 0, wxALIGN_CENTER|wxLEFT|wxRIGHT|wxBOTTOM, 5 );

    item2->Add( item29, 0, wxALIGN_CENTER_VERTICAL, 5 );

    wxBoxSizer *item34 = new wxBoxSizer( wxHORIZONTAL );

    item34->Add( 20, 20, 0, wxALIGN_CENTER, 5 );

    wxRadioButton *item35 = new wxRadioButton( parent, ID_RADIO_ROOF_FIELD, _("Field:"), wxDefaultPosition, wxDefaultSize, 0 );
    item34->Add( item35, 0, wxALIGN_CENTER|wxALL, 5 );

    wxString *strs36 = (wxString*) NULL;
    wxChoice *item36 = new wxChoice( parent, ID_CHOICE_ROOF_FIELD, wxDefaultPosition, wxSize(100,-1), 0, strs36, 0 );
    item34->Add( item36, 0, wxALIGN_CENTER|wxLEFT|wxRIGHT|wxBOTTOM, 5 );

    item2->Add( item34, 0, wxALIGN_CENTER_VERTICAL, 5 );

    item0->Add( item2, 0, wxALIGN_CENTER|wxALL, 5 );

    wxBoxSizer *item37 = new wxBoxSizer( wxHORIZONTAL );

    wxStaticText *item38 = new wxStaticText( parent, ID_TEXT, _("Defaults from:"), wxDefaultPosition, wxDefaultSize, 0 );
    item37->Add( item38, 0, wxALIGN_CENTER|wxALL, 5 );

    wxTextCtrl *item39 = new wxTextCtrl( parent, ID_DEFAULTS_FILE, wxT(""), wxDefaultPosition, wxSize(80,-1), wxTE_READONLY );
    item37->Add( item39, 1, wxALIGN_CENTER|wxRIGHT|wxTOP|wxBOTTOM, 5 );

    item0->Add( item37, 0, wxGROW|wxALIGN_CENTER_VERTICAL, 5 );

    wxCheckBox *item40 = new wxCheckBox( parent, ID_INSIDE_AREA, _("Only import features inside the Area Tool extents"), wxDefaultPosition, wxDefaultSize, 0 );
    item0->Add( item40, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    wxBoxSizer *item41 = new wxBoxSizer( wxHORIZONTAL );

    wxButton *item42 = new wxButton( parent, wxID_OK, _("OK"), wxDefaultPosition, wxDefaultSize, 0 );
    item41->Add( item42, 0, wxALIGN_CENTER|wxALL, 5 );

    wxButton *item43 = new wxButton( parent, wxID_CANCEL, _("Cancel"), wxDefaultPosition, wxDefaultSize, 0 );
    item41->Add( item43, 0, wxALIGN_CENTER|wxALL, 5 );

    item0->Add( item41, 0, wxALIGN_CENTER|wxALL, 5 );

    if (set_sizer)
    {
        parent->SetSizer( item0 );
        if (call_fit)
            item0->SetSizeHints( parent );
    }
    
    return item0;
}

wxSizer *ImportStructFuncOGR( wxWindow *parent, bool call_fit, bool set_sizer )
{
    wxBoxSizer *item0 = new wxBoxSizer( wxVERTICAL );

    wxStaticBox *item2 = new wxStaticBox( parent, -1, _("Layers") );
    wxStaticBoxSizer *item1 = new wxStaticBoxSizer( item2, wxHORIZONTAL );

    wxStaticText *item3 = new wxStaticText( parent, ID_TEXT, _("Import from"), wxDefaultPosition, wxDefaultSize, 0 );
    item1->Add( item3, 0, wxALIGN_CENTER|wxALL, 5 );

    wxString *strs4 = (wxString*) NULL;
    wxChoice *item4 = new wxChoice( parent, ID_LAYERNAME, wxDefaultPosition, wxSize(200,-1), 0, strs4, 0 );
    item1->Add( item4, 0, wxALIGN_CENTER|wxALL, 5 );

    item0->Add( item1, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    wxStaticBox *item6 = new wxStaticBox( parent, -1, _("Fields") );
    wxStaticBoxSizer *item5 = new wxStaticBoxSizer( item6, wxVERTICAL );

    wxBoxSizer *item7 = new wxBoxSizer( wxHORIZONTAL );

    wxStaticText *item8 = new wxStaticText( parent, ID_TEXT, _("Feature height"), wxDefaultPosition, wxDefaultSize, 0 );
    item7->Add( item8, 0, wxALIGN_CENTER|wxALL, 5 );

    wxString *strs9 = (wxString*) NULL;
    wxChoice *item9 = new wxChoice( parent, ID_CHOICE_HEIGHT_FIELD, wxDefaultPosition, wxSize(100,-1), 0, strs9, 0 );
    item7->Add( item9, 0, wxALIGN_CENTER|wxALL, 5 );

    wxString strs10[] = 
    {
        _("Stories"), 
        _("Meters"), 
        _("Feet")
    };
    wxChoice *item10 = new wxChoice( parent, ID_CHOICE_HEIGHT_TYPE, wxDefaultPosition, wxSize(80,-1), 3, strs10, 0 );
    item7->Add( item10, 0, wxALIGN_CENTER|wxALL, 5 );

    item5->Add( item7, 0, wxALIGN_RIGHT|wxALIGN_CENTER_VERTICAL, 5 );

    wxBoxSizer *item11 = new wxBoxSizer( wxHORIZONTAL );

    wxStaticText *item12 = new wxStaticText( parent, ID_TEXT, _("Feature elevation"), wxDefaultPosition, wxDefaultSize, 0 );
    item11->Add( item12, 0, wxALIGN_CENTER|wxALL, 5 );

    wxString *strs13 = (wxString*) NULL;
    wxChoice *item13 = new wxChoice( parent, ID_ELEVATION_FIELDNAME, wxDefaultPosition, wxSize(100,-1), 0, strs13, 0 );
    item11->Add( item13, 0, wxALIGN_CENTER|wxALL, 5 );

    wxString strs14[] = 
    {
        _("Meters"), 
        _("Feet")
    };
    wxChoice *item14 = new wxChoice( parent, ID_ELEVATION_UNITS, wxDefaultPosition, wxSize(80,-1), 2, strs14, 0 );
    item11->Add( item14, 0, wxALIGN_CENTER|wxALL, 5 );

    item5->Add( item11, 0, wxALIGN_CENTER_VERTICAL, 5 );

    item0->Add( item5, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    wxStaticBox *item16 = new wxStaticBox( parent, -1, _("Structure type") );
    wxStaticBoxSizer *item15 = new wxStaticBoxSizer( item16, wxVERTICAL );

    wxRadioButton *item17 = new wxRadioButton( parent, ID_TYPE_BUILDING, _("Buildings"), wxDefaultPosition, wxDefaultSize, wxRB_GROUP );
    item15->Add( item17, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    wxBoxSizer *item18 = new wxBoxSizer( wxHORIZONTAL );

    item18->Add( 20, 20, 0, wxALIGN_CENTER, 5 );

    wxCheckBox *item19 = new wxCheckBox( parent, ID_BUILD_FOUNDATIONS, _("Build foundations"), wxDefaultPosition, wxDefaultSize, 0 );
    item18->Add( item19, 0, wxALIGN_CENTER|wxALL, 5 );

    item15->Add( item18, 0, wxALIGN_CENTER_VERTICAL, 5 );

    wxRadioButton *item20 = new wxRadioButton( parent, ID_TYPE_LINEAR, _("Linear (fences or walls)"), wxDefaultPosition, wxDefaultSize, 0 );
    item15->Add( item20, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    wxRadioButton *item21 = new wxRadioButton( parent, ID_TYPE_INSTANCE, _("Instances (external model references)"), wxDefaultPosition, wxDefaultSize, 0 );
    item15->Add( item21, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    wxBoxSizer *item22 = new wxBoxSizer( wxHORIZONTAL );

    item22->Add( 20, 20, 0, wxALIGN_CENTER|wxALL, 5 );

    wxStaticText *item23 = new wxStaticText( parent, ID_TEXT, _("Filename field:"), wxDefaultPosition, wxDefaultSize, 0 );
    item22->Add( item23, 0, wxALIGN_CENTER|wxALL, 5 );

    wxString *strs24 = (wxString*) NULL;
    wxChoice *item24 = new wxChoice( parent, ID_CHOICE_FILE_FIELD, wxDefaultPosition, wxSize(100,-1), 0, strs24, 0 );
    item22->Add( item24, 0, wxALIGN_CENTER|wxALL, 5 );

    item15->Add( item22, 0, wxALIGN_CENTER_VERTICAL, 5 );

    item0->Add( item15, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    wxStaticBox *item26 = new wxStaticBox( parent, -1, _("Options") );
    wxStaticBoxSizer *item25 = new wxStaticBoxSizer( item26, wxVERTICAL );

    wxCheckBox *item27 = new wxCheckBox( parent, ID_INSIDE_AREA, _("Only import features inside the Area Tool extents"), wxDefaultPosition, wxDefaultSize, 0 );
    item25->Add( item27, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    wxCheckBox *item28 = new wxCheckBox( parent, ID_USE_25D, _("Use 2.5D for elevation"), wxDefaultPosition, wxDefaultSize, 0 );
    item25->Add( item28, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    item0->Add( item25, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    wxBoxSizer *item29 = new wxBoxSizer( wxHORIZONTAL );

    wxButton *item30 = new wxButton( parent, wxID_OK, _("OK"), wxDefaultPosition, wxDefaultSize, 0 );
    item29->Add( item30, 0, wxALIGN_CENTER|wxALL, 5 );

    wxButton *item31 = new wxButton( parent, wxID_CANCEL, _("Cancel"), wxDefaultPosition, wxDefaultSize, 0 );
    item29->Add( item31, 0, wxALIGN_CENTER|wxALL, 5 );

    item0->Add( item29, 0, wxALIGN_CENTER|wxALL, 5 );

    if (set_sizer)
    {
        parent->SetSizer( item0 );
        if (call_fit)
            item0->SetSizeHints( parent );
    }
    
    return item0;
}

wxSizer *LevelSelectionDialogFunc( wxWindow *parent, bool call_fit, bool set_sizer )
{
    wxBoxSizer *item0 = new wxBoxSizer( wxVERTICAL );

    wxBoxSizer *item1 = new wxBoxSizer( wxHORIZONTAL );

    wxStaticText *item2 = new wxStaticText( parent, ID_TEXT, _("Select level to edit"), wxDefaultPosition, wxDefaultSize, 0 );
    item1->Add( item2, 0, wxALIGN_CENTER|wxALL, 5 );

    wxString *strs3 = (wxString*) NULL;
    wxChoice *item3 = new wxChoice( parent, ID_LEVEL_CHOICE, wxDefaultPosition, wxSize(100,-1), 0, strs3, 0 );
    item1->Add( item3, 0, wxALIGN_CENTER|wxALL, 5 );

    item0->Add( item1, 0, wxALIGN_CENTER|wxALL, 5 );

    wxBoxSizer *item4 = new wxBoxSizer( wxHORIZONTAL );

    wxButton *item5 = new wxButton( parent, wxID_OK, _("OK"), wxDefaultPosition, wxDefaultSize, 0 );
    item4->Add( item5, 0, wxALIGN_CENTER|wxALL, 5 );

    wxButton *item6 = new wxButton( parent, wxID_CANCEL, _("Cancel"), wxDefaultPosition, wxDefaultSize, 0 );
    item4->Add( item6, 0, wxALIGN_CENTER|wxALL, 5 );

    item0->Add( item4, 0, wxALIGN_CENTER|wxALL, 5 );

    if (set_sizer)
    {
        parent->SetSizer( item0 );
        if (call_fit)
            item0->SetSizeHints( parent );
    }
    
    return item0;
}

wxSizer *SampleImageDialogFunc( wxWindow *parent, bool call_fit, bool set_sizer )
{
    wxBoxSizer *item0 = new wxBoxSizer( wxVERTICAL );

    wxStaticBox *item2 = new wxStaticBox( parent, -1, _("Output") );
    wxStaticBoxSizer *item1 = new wxStaticBoxSizer( item2, wxVERTICAL );

    wxRadioButton *item3 = new wxRadioButton( parent, ID_RADIO_CREATE_NEW, _("Create new layer"), wxDefaultPosition, wxDefaultSize, wxRB_GROUP );
    item1->Add( item3, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    wxBoxSizer *item4 = new wxBoxSizer( wxHORIZONTAL );

    wxRadioButton *item5 = new wxRadioButton( parent, ID_RADIO_TO_FILE, _("To file"), wxDefaultPosition, wxDefaultSize, 0 );
    item4->Add( item5, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    wxTextCtrl *item6 = new wxTextCtrl( parent, ID_TEXT_TO_FILE, wxT(""), wxDefaultPosition, wxSize(80,-1), 0 );
    item4->Add( item6, 1, wxALIGN_CENTER|wxALL, 5 );

    wxButton *item7 = new wxButton( parent, ID_DOTDOTDOT, _("..."), wxDefaultPosition, wxSize(24,-1), 0 );
    item7->SetFont( wxFont( 11, wxROMAN, wxNORMAL, wxBOLD ) );
    item4->Add( item7, 0, wxALIGN_CENTER|wxALL, 5 );

    item1->Add( item4, 0, wxGROW|wxALIGN_CENTER_VERTICAL, 5 );

    wxBoxSizer *item8 = new wxBoxSizer( wxHORIZONTAL );

    wxRadioButton *item9 = new wxRadioButton( parent, ID_RADIO_TO_TILES, _("To folder of Tiles"), wxDefaultPosition, wxDefaultSize, 0 );
    item8->Add( item9, 0, wxALIGN_CENTER_VERTICAL|wxLEFT|wxRIGHT|wxBOTTOM, 5 );

    wxTextCtrl *item10 = new wxTextCtrl( parent, ID_TEXT_TILE_INFO, wxT(""), wxDefaultPosition, wxSize(100,-1), wxTE_READONLY );
    item8->Add( item10, 0, wxALIGN_CENTER|wxLEFT|wxRIGHT|wxBOTTOM, 5 );

    wxButton *item11 = new wxButton( parent, ID_TILE_OPTIONS, _("Tile Options"), wxDefaultPosition, wxDefaultSize, 0 );
    item8->Add( item11, 0, wxALIGN_CENTER|wxLEFT|wxRIGHT|wxBOTTOM, 5 );

    item1->Add( item8, 0, wxGROW|wxALIGN_CENTER_VERTICAL, 5 );

    item0->Add( item1, 0, wxGROW|wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    wxStaticBox *item13 = new wxStaticBox( parent, -1, _("Sampling") );
    wxStaticBoxSizer *item12 = new wxStaticBoxSizer( item13, wxVERTICAL );

    wxBoxSizer *item14 = new wxBoxSizer( wxHORIZONTAL );

    wxStaticText *item15 = new wxStaticText( parent, ID_TEXT, _("Image size:"), wxDefaultPosition, wxDefaultSize, 0 );
    item14->Add( item15, 0, wxALIGN_CENTER|wxALL, 5 );

    wxTextCtrl *item16 = new wxTextCtrl( parent, ID_SIZEX, wxT(""), wxDefaultPosition, wxSize(60,-1), 0 );
    item14->Add( item16, 0, wxALIGN_CENTER|wxALL, 5 );

    wxTextCtrl *item17 = new wxTextCtrl( parent, ID_SIZEY, wxT(""), wxDefaultPosition, wxSize(60,-1), 0 );
    item14->Add( item17, 0, wxALIGN_CENTER|wxALL, 5 );

    item12->Add( item14, 0, wxALIGN_CENTER, 5 );

    wxBoxSizer *item18 = new wxBoxSizer( wxHORIZONTAL );

    wxStaticText *item19 = new wxStaticText( parent, ID_TEXT, _("Pixel spacing:"), wxDefaultPosition, wxDefaultSize, 0 );
    item18->Add( item19, 0, wxALIGN_CENTER|wxALL, 5 );

    wxTextCtrl *item20 = new wxTextCtrl( parent, ID_SPACINGX, wxT(""), wxDefaultPosition, wxSize(70,-1), 0 );
    item18->Add( item20, 0, wxALIGN_CENTER|wxALL, 5 );

    wxTextCtrl *item21 = new wxTextCtrl( parent, ID_SPACINGY, wxT(""), wxDefaultPosition, wxSize(70,-1), 0 );
    item18->Add( item21, 0, wxALIGN_CENTER|wxALL, 5 );

    item12->Add( item18, 0, wxALIGN_CENTER, 5 );

    wxBoxSizer *item22 = new wxBoxSizer( wxVERTICAL );

    wxCheckBox *item23 = new wxCheckBox( parent, ID_CONSTRAIN, _("Size constraint: power of 2 for texture map"), wxDefaultPosition, wxDefaultSize, 0 );
    item22->Add( item23, 0, wxALIGN_CENTER|wxALL, 5 );

    wxCheckBox *item24 = new wxCheckBox( parent, ID_TILING, _("Constrain to size for 4x4 overlap tiling"), wxDefaultPosition, wxDefaultSize, 0 );
    item22->Add( item24, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    item12->Add( item22, 0, wxALIGN_CENTER|wxLEFT|wxRIGHT, 5 );

    wxBoxSizer *item25 = new wxBoxSizer( wxHORIZONTAL );

    wxButton *item26 = new wxButton( parent, ID_SMALLER, _("<< Smaller"), wxDefaultPosition, wxDefaultSize, 0 );
    item25->Add( item26, 0, wxALIGN_CENTER|wxALL, 5 );

    wxButton *item27 = new wxButton( parent, ID_BIGGER, _(">> Bigger"), wxDefaultPosition, wxDefaultSize, 0 );
    item25->Add( item27, 0, wxALIGN_CENTER|wxALL, 5 );

    item12->Add( item25, 0, wxALIGN_CENTER|wxLEFT|wxRIGHT|wxBOTTOM, 5 );

    item0->Add( item12, 0, wxGROW|wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    wxStaticBox *item29 = new wxStaticBox( parent, -1, _("Information") );
    wxStaticBoxSizer *item28 = new wxStaticBoxSizer( item29, wxVERTICAL );

    wxBoxSizer *item30 = new wxBoxSizer( wxHORIZONTAL );

    wxStaticText *item31 = new wxStaticText( parent, ID_TEXT, _("Size of sample area:"), wxDefaultPosition, wxDefaultSize, 0 );
    item30->Add( item31, 0, wxALIGN_CENTER|wxALL, 5 );

    wxTextCtrl *item32 = new wxTextCtrl( parent, ID_AREAX, wxT(""), wxDefaultPosition, wxSize(80,-1), wxTE_READONLY );
    item30->Add( item32, 0, wxALIGN_CENTER|wxALL, 5 );

    wxTextCtrl *item33 = new wxTextCtrl( parent, ID_AREAY, wxT(""), wxDefaultPosition, wxSize(80,-1), wxTE_READONLY );
    item30->Add( item33, 0, wxALIGN_CENTER|wxALL, 5 );

    item28->Add( item30, 0, wxALIGN_CENTER_VERTICAL|wxLEFT|wxRIGHT|wxTOP, 5 );

    wxBoxSizer *item34 = new wxBoxSizer( wxHORIZONTAL );

    wxStaticText *item35 = new wxStaticText( parent, ID_TEXT, _("Estimated spacing of existing data:"), wxDefaultPosition, wxDefaultSize, 0 );
    item34->Add( item35, 0, wxALIGN_CENTER|wxALL, 5 );

    wxTextCtrl *item36 = new wxTextCtrl( parent, ID_ESTX, wxT(""), wxDefaultPosition, wxSize(60,-1), wxTE_READONLY );
    item34->Add( item36, 0, wxALIGN_CENTER|wxALL, 5 );

    wxTextCtrl *item37 = new wxTextCtrl( parent, ID_ESTY, wxT(""), wxDefaultPosition, wxSize(60,-1), wxTE_READONLY );
    item34->Add( item37, 0, wxALIGN_CENTER|wxALL, 5 );

    item28->Add( item34, 0, wxALIGN_CENTER_VERTICAL|wxLEFT|wxRIGHT|wxBOTTOM, 5 );

    item0->Add( item28, 0, wxALIGN_CENTER|wxALL, 5 );

    wxBoxSizer *item38 = new wxBoxSizer( wxHORIZONTAL );

    wxButton *item39 = new wxButton( parent, wxID_OK, _("OK"), wxDefaultPosition, wxDefaultSize, 0 );
    item38->Add( item39, 0, wxALIGN_CENTER|wxALL, 5 );

    wxButton *item40 = new wxButton( parent, wxID_CANCEL, _("Cancel"), wxDefaultPosition, wxDefaultSize, 0 );
    item38->Add( item40, 0, wxALIGN_CENTER|wxALL, 5 );

    item0->Add( item38, 0, wxALIGN_CENTER|wxALL, 5 );

    if (set_sizer)
    {
        parent->SetSizer( item0 );
        if (call_fit)
            item0->SetSizeHints( parent );
    }
    
    return item0;
}

wxSizer *MapServerDialogFunc( wxWindow *parent, bool call_fit, bool set_sizer )
{
    wxBoxSizer *item0 = new wxBoxSizer( wxVERTICAL );

    wxStaticText *item1 = new wxStaticText( parent, ID_TEXT, _("WMS base URL:"), wxDefaultPosition, wxDefaultSize, 0 );
    item0->Add( item1, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    wxString *strs2 = (wxString*) NULL;
    wxComboBox *item2 = new wxComboBox( parent, ID_BASE_URL, wxT(""), wxDefaultPosition, wxSize(400,-1), 0, strs2, wxCB_DROPDOWN );
    item0->Add( item2, 0, wxGROW|wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    wxButton *item3 = new wxButton( parent, ID_QUERY_LAYERS, _("Query Layers"), wxDefaultPosition, wxDefaultSize, 0 );
    item0->Add( item3, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    wxFlexGridSizer *item4 = new wxFlexGridSizer( 2, 0, 0 );
    item4->AddGrowableCol( 1 );
    item4->AddGrowableRow( 1 );

    wxStaticText *item5 = new wxStaticText( parent, ID_TEXT, _("Layer:"), wxDefaultPosition, wxDefaultSize, 0 );
    item4->Add( item5, 0, wxALL, 5 );

    wxStaticText *item6 = new wxStaticText( parent, ID_TEXT, _("Description:"), wxDefaultPosition, wxDefaultSize, 0 );
    item4->Add( item6, 0, wxALL, 5 );

    wxString *strs7 = (wxString*) NULL;
    wxListBox *item7 = new wxListBox( parent, ID_LIST_LAYERS, wxDefaultPosition, wxSize(130,-1), 0, strs7, wxLB_SINGLE );
    item4->Add( item7, 0, wxGROW|wxLEFT|wxRIGHT|wxBOTTOM, 5 );

    wxTextCtrl *item8 = new wxTextCtrl( parent, ID_LAYER_DESC, wxT(""), wxDefaultPosition, wxDefaultSize, wxTE_MULTILINE );
    item4->Add( item8, 1, wxGROW|wxLEFT|wxRIGHT|wxBOTTOM, 5 );

    item0->Add( item4, 2, wxGROW|wxALIGN_CENTER_VERTICAL|wxLEFT|wxRIGHT|wxBOTTOM, 5 );

    wxFlexGridSizer *item9 = new wxFlexGridSizer( 2, 0, 0 );
    item9->AddGrowableCol( 1 );
    item9->AddGrowableRow( 1 );

    wxStaticText *item10 = new wxStaticText( parent, ID_TEXT, _("Style:"), wxDefaultPosition, wxDefaultSize, 0 );
    item9->Add( item10, 0, wxALL, 5 );

    wxStaticText *item11 = new wxStaticText( parent, ID_TEXT, _("Description:"), wxDefaultPosition, wxDefaultSize, 0 );
    item9->Add( item11, 0, wxALL, 5 );

    wxString *strs12 = (wxString*) NULL;
    wxListBox *item12 = new wxListBox( parent, ID_LIST_STYLES, wxDefaultPosition, wxSize(130,20), 0, strs12, wxLB_SINGLE );
    item9->Add( item12, 0, wxGROW|wxLEFT|wxRIGHT|wxBOTTOM, 5 );

    wxTextCtrl *item13 = new wxTextCtrl( parent, ID_STYLE_DESC, wxT(""), wxDefaultPosition, wxSize(-1,20), wxTE_MULTILINE );
    item9->Add( item13, 1, wxGROW|wxLEFT|wxRIGHT|wxBOTTOM, 5 );

    item0->Add( item9, 1, wxGROW|wxALIGN_CENTER_VERTICAL|wxLEFT|wxRIGHT|wxBOTTOM, 5 );

    wxBoxSizer *item14 = new wxBoxSizer( wxHORIZONTAL );

    wxStaticText *item15 = new wxStaticText( parent, ID_TEXT, _("Width:"), wxDefaultPosition, wxDefaultSize, 0 );
    item14->Add( item15, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    wxTextCtrl *item16 = new wxTextCtrl( parent, ID_WIDTH, wxT(""), wxDefaultPosition, wxSize(80,-1), 0 );
    item14->Add( item16, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    wxStaticText *item17 = new wxStaticText( parent, ID_TEXT, _("Height:"), wxDefaultPosition, wxDefaultSize, 0 );
    item14->Add( item17, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    wxTextCtrl *item18 = new wxTextCtrl( parent, ID_HEIGHT, wxT(""), wxDefaultPosition, wxSize(80,-1), 0 );
    item14->Add( item18, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    wxStaticText *item19 = new wxStaticText( parent, ID_TEXT, _("Format"), wxDefaultPosition, wxDefaultSize, 0 );
    item14->Add( item19, 0, wxALIGN_CENTER|wxALL, 5 );

    wxString *strs20 = (wxString*) NULL;
    wxChoice *item20 = new wxChoice( parent, ID_CHOICE_FORMAT, wxDefaultPosition, wxSize(100,-1), 0, strs20, 0 );
    item14->Add( item20, 0, wxALIGN_CENTER|wxALL, 5 );

    item0->Add( item14, 0, wxGROW|wxALIGN_CENTER_VERTICAL|wxALL, 0 );

    wxStaticText *item21 = new wxStaticText( parent, ID_TEXT, _("Query URL:"), wxDefaultPosition, wxDefaultSize, 0 );
    item0->Add( item21, 0, wxALIGN_CENTER_VERTICAL|wxLEFT|wxRIGHT|wxTOP, 5 );

    wxTextCtrl *item22 = new wxTextCtrl( parent, ID_QUERY, wxT(""), wxDefaultPosition, wxSize(-1,60), wxTE_MULTILINE );
    item0->Add( item22, 1, wxGROW|wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    wxStaticBox *item24 = new wxStaticBox( parent, -1, _("Output") );
    wxStaticBoxSizer *item23 = new wxStaticBoxSizer( item24, wxVERTICAL );

    wxRadioButton *item25 = new wxRadioButton( parent, ID_RADIO_CREATE_NEW, _("Create new layer"), wxDefaultPosition, wxDefaultSize, wxRB_GROUP );
    item23->Add( item25, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    wxBoxSizer *item26 = new wxBoxSizer( wxHORIZONTAL );

    wxRadioButton *item27 = new wxRadioButton( parent, ID_RADIO_TO_FILE, _("To file"), wxDefaultPosition, wxDefaultSize, 0 );
    item26->Add( item27, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    wxTextCtrl *item28 = new wxTextCtrl( parent, ID_TEXT_TO_FILE, wxT(""), wxDefaultPosition, wxSize(80,-1), 0 );
    item26->Add( item28, 1, wxALIGN_CENTER|wxALL, 5 );

    wxButton *item29 = new wxButton( parent, ID_DOTDOTDOT, _("..."), wxDefaultPosition, wxSize(24,-1), 0 );
    item29->SetFont( wxFont( 11, wxROMAN, wxNORMAL, wxBOLD ) );
    item26->Add( item29, 0, wxALIGN_CENTER|wxALL, 5 );

    item23->Add( item26, 0, wxGROW|wxALIGN_CENTER_VERTICAL, 5 );

    item0->Add( item23, 0, wxGROW|wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    wxBoxSizer *item30 = new wxBoxSizer( wxHORIZONTAL );

    wxButton *item31 = new wxButton( parent, wxID_OK, _("OK"), wxDefaultPosition, wxDefaultSize, 0 );
    item30->Add( item31, 0, wxALIGN_CENTER|wxALL, 5 );

    wxButton *item32 = new wxButton( parent, wxID_CANCEL, _("Cancel"), wxDefaultPosition, wxDefaultSize, 0 );
    item30->Add( item32, 0, wxALIGN_CENTER|wxALL, 5 );

    item0->Add( item30, 0, wxALIGN_CENTER|wxALL, 5 );

    if (set_sizer)
    {
        parent->SetSizer( item0 );
        if (call_fit)
            item0->SetSizeHints( parent );
    }
    
    return item0;
}

wxSizer *SpeciesListFunc( wxWindow *parent, bool call_fit, bool set_sizer )
{
    wxBoxSizer *item0 = new wxBoxSizer( wxVERTICAL );

    wxSplitterWindow *item1 = new wxSplitterWindow( parent, ID_SPLITTER1, wxDefaultPosition, wxSize(850,400), 0 );
    wxPanel *item2 = new wxPanel( item1, -1 );
    Species1Func( item2, FALSE, TRUE );
    wxPanel *item3 = new wxPanel( item1, -1 );
    Species2Func( item3, FALSE, TRUE );
    item1->SplitVertically( item2, item3 );
    item0->Add( item1, 1, wxGROW|wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    wxBoxSizer *item4 = new wxBoxSizer( wxHORIZONTAL );

    wxButton *item5 = new wxButton( parent, wxID_OK, _("OK"), wxDefaultPosition, wxDefaultSize, 0 );
    item4->Add( item5, 0, wxALIGN_CENTER|wxALL, 5 );

    item0->Add( item4, 0, wxALIGN_CENTER, 5 );

    if (set_sizer)
    {
        parent->SetSizer( item0 );
        if (call_fit)
            item0->SetSizeHints( parent );
    }
    
    return item0;
}

wxSizer *Species1Func( wxWindow *parent, bool call_fit, bool set_sizer )
{
    wxBoxSizer *item0 = new wxBoxSizer( wxVERTICAL );

    wxStaticText *item1 = new wxStaticText( parent, ID_TEXT, _("Species"), wxDefaultPosition, wxDefaultSize, 0 );
    item0->Add( item1, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    wxListCtrl *item2 = new wxListCtrl( parent, ID_LISTCTRL_SPECIES, wxDefaultPosition, wxSize(160,120), wxLC_REPORT|wxSUNKEN_BORDER );
    item0->Add( item2, 1, wxGROW|wxALIGN_CENTER_VERTICAL|wxLEFT|wxRIGHT|wxTOP, 5 );

    if (set_sizer)
    {
        parent->SetSizer( item0 );
        if (call_fit)
            item0->SetSizeHints( parent );
    }
    
    return item0;
}

wxSizer *Species2Func( wxWindow *parent, bool call_fit, bool set_sizer )
{
    wxBoxSizer *item0 = new wxBoxSizer( wxVERTICAL );

    wxStaticText *item1 = new wxStaticText( parent, ID_TEXT, _("Appearances"), wxDefaultPosition, wxDefaultSize, 0 );
    item0->Add( item1, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    wxListCtrl *item2 = new wxListCtrl( parent, ID_LISTCTRL_APPEARANCES, wxDefaultPosition, wxSize(160,120), wxLC_REPORT|wxSUNKEN_BORDER );
    item0->Add( item2, 1, wxGROW|wxALIGN_CENTER_VERTICAL|wxLEFT|wxRIGHT|wxTOP, 5 );

    if (set_sizer)
    {
        parent->SetSizer( item0 );
        if (call_fit)
            item0->SetSizeHints( parent );
    }
    
    return item0;
}

wxSizer *TSDialogFunc( wxWindow *parent, bool call_fit, bool set_sizer )
{
    wxBoxSizer *item0 = new wxBoxSizer( wxVERTICAL );

    wxBoxSizer *item1 = new wxBoxSizer( wxHORIZONTAL );

    wxStaticText *item2 = new wxStaticText( parent, ID_TEXT, _("Theme:"), wxDefaultPosition, wxDefaultSize, 0 );
    item1->Add( item2, 0, wxALIGN_CENTER|wxALL, 5 );

    wxString *strs3 = (wxString*) NULL;
    wxChoice *item3 = new wxChoice( parent, ID_THEME, wxDefaultPosition, wxSize(100,-1), 0, strs3, 0 );
    item1->Add( item3, 0, wxALIGN_CENTER|wxALL, 5 );

    item0->Add( item1, 0, wxALIGN_CENTER|wxALL, 0 );

    wxBoxSizer *item4 = new wxBoxSizer( wxHORIZONTAL );

    wxStaticText *item5 = new wxStaticText( parent, ID_TEXT, _("Meters per pixel:"), wxDefaultPosition, wxDefaultSize, 0 );
    item4->Add( item5, 0, wxALIGN_CENTER|wxALL, 5 );

    wxString *strs6 = (wxString*) NULL;
    wxChoice *item6 = new wxChoice( parent, ID_MPP, wxDefaultPosition, wxSize(100,-1), 0, strs6, 0 );
    item4->Add( item6, 0, wxALIGN_CENTER|wxALL, 5 );

    item0->Add( item4, 0, wxALIGN_CENTER|wxALL, 0 );

    wxStaticBox *item8 = new wxStaticBox( parent, -1, _("Output") );
    wxStaticBoxSizer *item7 = new wxStaticBoxSizer( item8, wxVERTICAL );

    wxRadioButton *item9 = new wxRadioButton( parent, ID_RADIO_CREATE_NEW, _("Create new layer"), wxDefaultPosition, wxDefaultSize, wxRB_GROUP );
    item9->Enable( false );
    item7->Add( item9, 0, wxALIGN_CENTER_VERTICAL|wxLEFT|wxRIGHT|wxTOP, 5 );

    wxBoxSizer *item10 = new wxBoxSizer( wxHORIZONTAL );

    wxRadioButton *item11 = new wxRadioButton( parent, ID_RADIO_TO_FILE, _("To file"), wxDefaultPosition, wxDefaultSize, 0 );
    item10->Add( item11, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    wxTextCtrl *item12 = new wxTextCtrl( parent, ID_TEXT_TO_FILE, wxT(""), wxDefaultPosition, wxSize(180,-1), 0 );
    item10->Add( item12, 1, wxALIGN_CENTER|wxALL, 5 );

    wxButton *item13 = new wxButton( parent, ID_DOTDOTDOT, _("..."), wxDefaultPosition, wxSize(24,-1), 0 );
    item13->SetFont( wxFont( 11, wxROMAN, wxNORMAL, wxNORMAL ) );
    item10->Add( item13, 0, wxALIGN_CENTER|wxALL, 5 );

    item7->Add( item10, 0, wxGROW|wxALIGN_CENTER_VERTICAL, 5 );

    item0->Add( item7, 0, wxGROW|wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    wxBoxSizer *item14 = new wxBoxSizer( wxHORIZONTAL );

    wxButton *item15 = new wxButton( parent, wxID_OK, _("OK"), wxDefaultPosition, wxDefaultSize, 0 );
    item14->Add( item15, 0, wxALIGN_CENTER|wxALL, 5 );

    wxButton *item16 = new wxButton( parent, wxID_CANCEL, _("Cancel"), wxDefaultPosition, wxDefaultSize, 0 );
    item14->Add( item16, 0, wxALIGN_CENTER|wxALL, 5 );

    item0->Add( item14, 0, wxALIGN_CENTER|wxALL, 5 );

    if (set_sizer)
    {
        parent->SetSizer( item0 );
        if (call_fit)
            item0->SetSizeHints( parent );
    }
    
    return item0;
}

wxSizer *RenderBitmapDialogFunc( wxWindow *parent, bool call_fit, bool set_sizer )
{
    wxBoxSizer *item0 = new wxBoxSizer( wxVERTICAL );

    wxStaticBox *item2 = new wxStaticBox( parent, -1, _("Output") );
    wxStaticBoxSizer *item1 = new wxStaticBoxSizer( item2, wxVERTICAL );

    wxRadioButton *item3 = new wxRadioButton( parent, ID_RADIO_CREATE_NEW, _("Create new image layer"), wxDefaultPosition, wxDefaultSize, wxRB_GROUP );
    item1->Add( item3, 0, wxALIGN_CENTER_VERTICAL|wxLEFT|wxRIGHT|wxTOP, 5 );

    wxBoxSizer *item4 = new wxBoxSizer( wxHORIZONTAL );

    wxRadioButton *item5 = new wxRadioButton( parent, ID_RADIO_TO_FILE, _("Write to file:"), wxDefaultPosition, wxDefaultSize, 0 );
    item4->Add( item5, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    item1->Add( item4, 0, wxGROW|wxALIGN_CENTER_VERTICAL, 5 );

    wxBoxSizer *item6 = new wxBoxSizer( wxHORIZONTAL );

    item6->Add( 20, 20, 0, wxALIGN_CENTER|wxALL, 5 );

    wxTextCtrl *item7 = new wxTextCtrl( parent, ID_TEXT_TO_FILE, wxT(""), wxDefaultPosition, wxSize(80,-1), 0 );
    item6->Add( item7, 1, wxALIGN_CENTER|wxALL, 5 );

    wxButton *item8 = new wxButton( parent, ID_DOTDOTDOT, _("..."), wxDefaultPosition, wxSize(24,-1), 0 );
    item6->Add( item8, 0, wxALIGN_CENTER|wxALL, 5 );

    item1->Add( item6, 0, wxGROW|wxALIGN_CENTER_VERTICAL, 5 );

    wxBoxSizer *item9 = new wxBoxSizer( wxHORIZONTAL );

    wxStaticText *item10 = new wxStaticText( parent, ID_TEXT, _("Format:"), wxDefaultPosition, wxDefaultSize, 0 );
    item9->Add( item10, 0, wxALIGN_CENTER|wxALL, 5 );

    wxRadioButton *item11 = new wxRadioButton( parent, ID_GEOTIFF, _("GeoTIFF"), wxDefaultPosition, wxDefaultSize, wxRB_GROUP );
    item9->Add( item11, 0, wxALIGN_CENTER|wxALL, 5 );

    wxRadioButton *item12 = new wxRadioButton( parent, ID_JPEG, _("JPEG"), wxDefaultPosition, wxDefaultSize, 0 );
    item9->Add( item12, 0, wxALIGN_CENTER|wxALL, 5 );

    item1->Add( item9, 0, wxALIGN_CENTER, 5 );

    item0->Add( item1, 0, wxGROW|wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    wxStaticBox *item14 = new wxStaticBox( parent, -1, _("Appearance") );
    wxStaticBoxSizer *item13 = new wxStaticBoxSizer( item14, wxVERTICAL );

    wxBoxSizer *item15 = new wxBoxSizer( wxHORIZONTAL );

    wxStaticText *item16 = new wxStaticText( parent, ID_TEXT, _("Colors:"), wxDefaultPosition, wxDefaultSize, 0 );
    item15->Add( item16, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    wxString *strs17 = (wxString*) NULL;
    wxChoice *item17 = new wxChoice( parent, ID_CHOICE_COLORS, wxDefaultPosition, wxSize(180,-1), 0, strs17, 0 );
    item15->Add( item17, 0, wxALIGN_CENTER|wxALL, 5 );

    wxButton *item18 = new wxButton( parent, ID_EDIT_COLORS, _("Edit Colors..."), wxDefaultPosition, wxDefaultSize, 0 );
    item15->Add( item18, 0, wxALIGN_CENTER|wxALL, 5 );

    item13->Add( item15, 0, wxALIGN_CENTER, 5 );

    wxBoxSizer *item19 = new wxBoxSizer( wxHORIZONTAL );

    item19->Add( 20, 20, 0, wxALIGN_CENTER|wxALL, 5 );

    wxCheckBox *item20 = new wxCheckBox( parent, ID_SHADING, _("Use view options for shading"), wxDefaultPosition, wxDefaultSize, 0 );
    item19->Add( item20, 0, wxALIGN_CENTER|wxALL, 5 );

    item13->Add( item19, 0, wxALIGN_CENTER_VERTICAL, 5 );

    item0->Add( item13, 0, wxGROW|wxALIGN_CENTER_VERTICAL|wxLEFT|wxRIGHT|wxBOTTOM, 5 );

    wxStaticBox *item22 = new wxStaticBox( parent, -1, _("Bitmap Size") );
    wxStaticBoxSizer *item21 = new wxStaticBoxSizer( item22, wxVERTICAL );

    wxBoxSizer *item23 = new wxBoxSizer( wxHORIZONTAL );

    wxStaticText *item24 = new wxStaticText( parent, ID_TEXT, _("Image size:"), wxDefaultPosition, wxDefaultSize, 0 );
    item23->Add( item24, 0, wxALIGN_CENTER|wxALL, 5 );

    wxTextCtrl *item25 = new wxTextCtrl( parent, ID_SIZEX, wxT(""), wxDefaultPosition, wxSize(60,-1), 0 );
    item23->Add( item25, 0, wxALIGN_CENTER|wxALL, 5 );

    wxTextCtrl *item26 = new wxTextCtrl( parent, ID_SIZEY, wxT(""), wxDefaultPosition, wxSize(60,-1), 0 );
    item23->Add( item26, 0, wxALIGN_CENTER|wxALL, 5 );

    item21->Add( item23, 0, wxALIGN_CENTER, 5 );

    wxBoxSizer *item27 = new wxBoxSizer( wxVERTICAL );

    wxCheckBox *item28 = new wxCheckBox( parent, ID_CONSTRAIN, _("Size constraint: power of 2 for texture map"), wxDefaultPosition, wxDefaultSize, 0 );
    item27->Add( item28, 0, wxALIGN_CENTER|wxALL, 5 );

    wxCheckBox *item29 = new wxCheckBox( parent, ID_TILING, _("Constrain to size for 4x4 overlap tiling"), wxDefaultPosition, wxDefaultSize, 0 );
    item27->Add( item29, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    item21->Add( item27, 0, wxALIGN_CENTER|wxLEFT|wxRIGHT, 5 );

    wxBoxSizer *item30 = new wxBoxSizer( wxHORIZONTAL );

    wxButton *item31 = new wxButton( parent, ID_SMALLER, _("<< Smaller"), wxDefaultPosition, wxDefaultSize, 0 );
    item30->Add( item31, 0, wxALIGN_CENTER|wxALL, 5 );

    wxButton *item32 = new wxButton( parent, ID_BIGGER, _(">> Bigger"), wxDefaultPosition, wxDefaultSize, 0 );
    item30->Add( item32, 0, wxALIGN_CENTER|wxALL, 5 );

    item21->Add( item30, 0, wxALIGN_CENTER|wxLEFT|wxRIGHT|wxBOTTOM, 5 );

    item0->Add( item21, 0, wxGROW|wxALIGN_CENTER_VERTICAL|wxLEFT|wxRIGHT|wxBOTTOM, 5 );

    wxBoxSizer *item33 = new wxBoxSizer( wxHORIZONTAL );

    wxButton *item34 = new wxButton( parent, wxID_OK, _("OK"), wxDefaultPosition, wxDefaultSize, 0 );
    item33->Add( item34, 0, wxALIGN_CENTER|wxALL, 5 );

    wxButton *item35 = new wxButton( parent, wxID_CANCEL, _("Cancel"), wxDefaultPosition, wxDefaultSize, 0 );
    item33->Add( item35, 0, wxALIGN_CENTER|wxALL, 5 );

    item0->Add( item33, 0, wxALIGN_CENTER|wxALL, 5 );

    if (set_sizer)
    {
        parent->SetSizer( item0 );
        if (call_fit)
            item0->SetSizeHints( parent );
    }
    
    return item0;
}

wxSizer *ImageMapDialogFunc( wxWindow *parent, bool call_fit, bool set_sizer )
{
    wxBoxSizer *item0 = new wxBoxSizer( wxVERTICAL );

    wxBoxSizer *item1 = new wxBoxSizer( wxHORIZONTAL );

    wxStaticText *item2 = new wxStaticText( parent, ID_TEXT, 
        wxT("This operation will take the current contents of the\n")
        wxT("window and export them a PNG file.\n")
        wxT("A corresponding HTML file will be written with an\n")
        wxT("image map with clickable areas derived from\n")
        wxT("the polygon features of the active Raw layer."),
        wxDefaultPosition, wxDefaultSize, 0 );
    item1->Add( item2, 0, wxALIGN_CENTER|wxALL, 5 );

    item0->Add( item1, 0, wxALIGN_CENTER|wxALL, 5 );

    wxBoxSizer *item3 = new wxBoxSizer( wxHORIZONTAL );

    wxStaticText *item4 = new wxStaticText( parent, ID_TEXT, _("Link field:"), wxDefaultPosition, wxDefaultSize, 0 );
    item3->Add( item4, 0, wxALIGN_CENTER|wxALL, 5 );

    wxString *strs5 = (wxString*) NULL;
    wxChoice *item5 = new wxChoice( parent, ID_LINK_FIELD, wxDefaultPosition, wxSize(100,-1), 0, strs5, 0 );
    item3->Add( item5, 1, wxGROW|wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    item0->Add( item3, 0, wxGROW|wxALIGN_CENTER_VERTICAL|wxALL, 0 );

    wxBoxSizer *item6 = new wxBoxSizer( wxHORIZONTAL );

    wxButton *item7 = new wxButton( parent, wxID_OK, _("OK"), wxDefaultPosition, wxDefaultSize, 0 );
    item6->Add( item7, 0, wxALIGN_CENTER|wxALL, 5 );

    wxButton *item8 = new wxButton( parent, wxID_CANCEL, _("Cancel"), wxDefaultPosition, wxDefaultSize, 0 );
    item6->Add( item8, 0, wxALIGN_CENTER|wxALL, 5 );

    item0->Add( item6, 0, wxALIGN_CENTER|wxLEFT|wxRIGHT|wxBOTTOM, 5 );

    if (set_sizer)
    {
        parent->SetSizer( item0 );
        if (call_fit)
            item0->SetSizeHints( parent );
    }
    
    return item0;
}

wxSizer *ImportPointDialogFunc( wxWindow *parent, bool call_fit, bool set_sizer )
{
    wxBoxSizer *item0 = new wxBoxSizer( wxVERTICAL );

    wxBoxSizer *item1 = new wxBoxSizer( wxHORIZONTAL );

    wxStaticText *item2 = new wxStaticText( parent, ID_TEXT, _("Easting field:"), wxDefaultPosition, wxDefaultSize, 0 );
    item1->Add( item2, 0, wxALIGN_CENTER|wxALL, 5 );

    wxString *strs3 = (wxString*) NULL;
    wxChoice *item3 = new wxChoice( parent, ID_EASTING, wxDefaultPosition, wxSize(160,-1), 0, strs3, 0 );
    item1->Add( item3, 0, wxALIGN_CENTER|wxALL, 5 );

    item0->Add( item1, 0, wxALIGN_CENTER_VERTICAL|wxALL, 0 );

    wxBoxSizer *item4 = new wxBoxSizer( wxHORIZONTAL );

    wxStaticText *item5 = new wxStaticText( parent, ID_TEXT, _("Northing field:"), wxDefaultPosition, wxDefaultSize, 0 );
    item4->Add( item5, 0, wxALIGN_CENTER|wxALL, 5 );

    wxString *strs6 = (wxString*) NULL;
    wxChoice *item6 = new wxChoice( parent, ID_NORTHING, wxDefaultPosition, wxSize(160,-1), 0, strs6, 0 );
    item4->Add( item6, 0, wxALIGN_CENTER|wxALL, 5 );

    item0->Add( item4, 0, wxALIGN_CENTER_VERTICAL|wxALL, 0 );

    wxBoxSizer *item7 = new wxBoxSizer( wxHORIZONTAL );

    wxStaticText *item8 = new wxStaticText( parent, ID_TEXT, _("CRS:"), wxDefaultPosition, wxDefaultSize, 0 );
    item7->Add( item8, 0, wxALIGN_CENTER|wxALL, 5 );

    wxTextCtrl *item9 = new wxTextCtrl( parent, ID_CRS, wxT(""), wxDefaultPosition, wxSize(180,-1), 0 );
    item7->Add( item9, 1, wxALIGN_CENTER|wxALL, 5 );

    wxButton *item10 = new wxButton( parent, ID_SET_CRS, _("Set"), wxDefaultPosition, wxSize(40,-1), 0 );
    item7->Add( item10, 0, wxALIGN_CENTER|wxALL, 5 );

    item0->Add( item7, 0, wxGROW|wxALIGN_CENTER_VERTICAL|wxALL, 0 );

    wxStaticBox *item12 = new wxStaticBox( parent, -1, _("Number format:") );
    wxStaticBoxSizer *item11 = new wxStaticBoxSizer( item12, wxVERTICAL );

    wxRadioButton *item13 = new wxRadioButton( parent, ID_FORMAT_DECIMAL, _("Decimal"), wxDefaultPosition, wxDefaultSize, wxRB_GROUP );
    item11->Add( item13, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    wxRadioButton *item14 = new wxRadioButton( parent, ID_FORMAT_DMS, _("Packed degrees: DDDMMSSSS, DDMMSSSS"), wxDefaultPosition, wxDefaultSize, 0 );
    item11->Add( item14, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    item0->Add( item11, 0, wxALIGN_CENTER|wxALL, 5 );

    wxBoxSizer *item15 = new wxBoxSizer( wxHORIZONTAL );

    wxCheckBox *item16 = new wxCheckBox( parent, ID_LONGITUDE_WEST, _("Longitude is west"), wxDefaultPosition, wxDefaultSize, 0 );
    item15->Add( item16, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    item0->Add( item15, 0, wxALIGN_CENTER_VERTICAL|wxLEFT|wxRIGHT|wxBOTTOM, 5 );

    wxBoxSizer *item17 = new wxBoxSizer( wxHORIZONTAL );

    wxButton *item18 = new wxButton( parent, wxID_OK, _("OK"), wxDefaultPosition, wxDefaultSize, 0 );
    item17->Add( item18, 0, wxALIGN_CENTER|wxALL, 5 );

    wxButton *item19 = new wxButton( parent, wxID_CANCEL, _("Cancel"), wxDefaultPosition, wxDefaultSize, 0 );
    item17->Add( item19, 0, wxALIGN_CENTER|wxALL, 5 );

    item0->Add( item17, 0, wxALIGN_CENTER|wxALL, 5 );

    if (set_sizer)
    {
        parent->SetSizer( item0 );
        if (call_fit)
            item0->SetSizeHints( parent );
    }
    
    return item0;
}

wxSizer *GeocodeDialogFunc( wxWindow *parent, bool call_fit, bool set_sizer )
{
    wxBoxSizer *item0 = new wxBoxSizer( wxVERTICAL );

    wxStaticBox *item2 = new wxStaticBox( parent, -1, _("Data File") );
    wxStaticBoxSizer *item1 = new wxStaticBoxSizer( item2, wxHORIZONTAL );

    wxTextCtrl *item3 = new wxTextCtrl( parent, ID_FILE_DATA, wxT(""), wxDefaultPosition, wxDefaultSize, wxTE_READONLY );
    item1->Add( item3, 1, wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    wxButton *item4 = new wxButton( parent, ID_GET_FILE_DATA, _("..."), wxDefaultPosition, wxSize(22,-1), 0 );
    item1->Add( item4, 0, wxALIGN_CENTER|wxALL, 5 );

    item0->Add( item1, 0, wxGROW|wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    wxStaticBox *item6 = new wxStaticBox( parent, -1, _("Geocoding") );
    wxStaticBoxSizer *item5 = new wxStaticBoxSizer( item6, wxVERTICAL );

    wxCheckBox *item7 = new wxCheckBox( parent, ID_CHECK_USE1, wxT("Use Geocode.us (Web, US street addresses)"), wxDefaultPosition, wxDefaultSize, 0 );
    item5->Add( item7, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    wxCheckBox *item8 = new wxCheckBox( parent, ID_CHECK_USE2, wxT("Use Gazeteer (US Cities)"), wxDefaultPosition, wxDefaultSize, 0 );
    item5->Add( item8, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    wxBoxSizer *item9 = new wxBoxSizer( wxHORIZONTAL );

    item9->Add( 20, 20, 0, wxALIGN_CENTER|wxALL, 5 );

    wxStaticText *item10 = new wxStaticText( parent, ID_TEXT, _("Places:"), wxDefaultPosition, wxDefaultSize, 0 );
    item9->Add( item10, 0, wxALIGN_CENTER|wxALL, 5 );

    wxTextCtrl *item11 = new wxTextCtrl( parent, ID_FILE_GAZ, wxT(""), wxDefaultPosition, wxSize(80,-1), 0 );
    item9->Add( item11, 1, wxALIGN_CENTER|wxALL, 5 );

    wxButton *item12 = new wxButton( parent, ID_GET_FILE_GAZ, _("..."), wxDefaultPosition, wxSize(22,-1), 0 );
    item9->Add( item12, 0, wxALIGN_CENTER|wxLEFT|wxRIGHT, 5 );

    item5->Add( item9, 0, wxGROW|wxALIGN_CENTER_VERTICAL, 5 );

    wxBoxSizer *item13 = new wxBoxSizer( wxHORIZONTAL );

    item13->Add( 20, 20, 0, wxALIGN_CENTER|wxALL, 5 );

    wxStaticText *item14 = new wxStaticText( parent, ID_TEXT, _("Zipcodes:"), wxDefaultPosition, wxDefaultSize, 0 );
    item13->Add( item14, 0, wxALIGN_CENTER|wxALL, 5 );

    wxTextCtrl *item15 = new wxTextCtrl( parent, ID_FILE_ZIP, wxT(""), wxDefaultPosition, wxSize(80,-1), 0 );
    item13->Add( item15, 1, wxALIGN_CENTER|wxALL, 5 );

    wxButton *item16 = new wxButton( parent, ID_GET_FILE_ZIP, _("..."), wxDefaultPosition, wxSize(22,-1), 0 );
    item13->Add( item16, 0, wxALIGN_CENTER|wxLEFT|wxRIGHT, 5 );

    item5->Add( item13, 0, wxGROW|wxALIGN_CENTER_VERTICAL, 5 );

    wxCheckBox *item17 = new wxCheckBox( parent, ID_CHECK_USE3, wxT("Use NIMA GEOnet (International Cities)"), wxDefaultPosition, wxDefaultSize, 0 );
    item5->Add( item17, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    wxBoxSizer *item18 = new wxBoxSizer( wxHORIZONTAL );

    item18->Add( 16, 16, 0, wxALIGN_CENTER|wxALL, 5 );

    wxTextCtrl *item19 = new wxTextCtrl( parent, ID_FILE_GNS, wxT(""), wxDefaultPosition, wxSize(80,-1), 0 );
    item18->Add( item19, 1, wxALIGN_CENTER|wxALL, 5 );

    wxButton *item20 = new wxButton( parent, ID_GET_FILE_GNS, _("..."), wxDefaultPosition, wxSize(22,-1), 0 );
    item18->Add( item20, 0, wxALIGN_CENTER|wxALL, 5 );

    item5->Add( item18, 0, wxGROW|wxALIGN_CENTER_VERTICAL, 5 );

    item0->Add( item5, 0, wxGROW|wxALIGN_CENTER_VERTICAL|wxLEFT|wxRIGHT, 5 );

    wxBoxSizer *item21 = new wxBoxSizer( wxHORIZONTAL );

    wxButton *item22 = new wxButton( parent, wxID_OK, _("OK"), wxDefaultPosition, wxDefaultSize, 0 );
    item21->Add( item22, 0, wxALIGN_CENTER|wxALL, 5 );

    wxButton *item23 = new wxButton( parent, wxID_CANCEL, _("Cancel"), wxDefaultPosition, wxDefaultSize, 0 );
    item21->Add( item23, 0, wxALIGN_CENTER|wxALL, 5 );

    item0->Add( item21, 0, wxALIGN_CENTER|wxALL, 5 );

    if (set_sizer)
    {
        parent->SetSizer( item0 );
        if (call_fit)
            item0->SetSizeHints( parent );
    }
    
    return item0;
}

wxSizer *ChunkDialogFunc( wxWindow *parent, bool call_fit, bool set_sizer )
{
    wxBoxSizer *item0 = new wxBoxSizer( wxVERTICAL );

    wxFlexGridSizer *item1 = new wxFlexGridSizer( 2, 0, 0 );

    wxStaticText *item2 = new wxStaticText( parent, ID_TEXT, _("Depth of the quadtree of chunks to generate:"), wxDefaultPosition, wxDefaultSize, 0 );
    item1->Add( item2, 0, wxALIGN_CENTER|wxALL, 5 );

    wxTextCtrl *item3 = new wxTextCtrl( parent, ID_DEPTH, wxT(""), wxDefaultPosition, wxSize(80,-1), 0 );
    item1->Add( item3, 0, wxALIGN_CENTER|wxLEFT|wxRIGHT|wxTOP, 5 );

    wxStaticText *item4 = new wxStaticText( parent, ID_TEXT, _("Maximum geometric error to allow at full LOD:"), wxDefaultPosition, wxDefaultSize, 0 );
    item1->Add( item4, 0, wxALIGN_CENTER|wxALL, 5 );

    wxTextCtrl *item5 = new wxTextCtrl( parent, ID_MAXERROR, wxT(""), wxDefaultPosition, wxSize(80,-1), 0 );
    item1->Add( item5, 0, wxALIGN_CENTER|wxLEFT|wxRIGHT|wxTOP, 5 );

    item0->Add( item1, 0, wxALIGN_CENTER|wxALL, 5 );

    wxBoxSizer *item6 = new wxBoxSizer( wxHORIZONTAL );

    wxButton *item7 = new wxButton( parent, wxID_OK, _("OK"), wxDefaultPosition, wxDefaultSize, 0 );
    item6->Add( item7, 0, wxALIGN_CENTER|wxALL, 5 );

    wxButton *item8 = new wxButton( parent, wxID_CANCEL, _("Cancel"), wxDefaultPosition, wxDefaultSize, 0 );
    item6->Add( item8, 0, wxALIGN_CENTER|wxALL, 5 );

    item0->Add( item6, 0, wxALIGN_CENTER|wxLEFT|wxRIGHT|wxBOTTOM, 5 );

    if (set_sizer)
    {
        parent->SetSizer( item0 );
        if (call_fit)
            item0->SetSizeHints( parent );
    }
    
    return item0;
}

wxSizer *TileDialogFunc( wxWindow *parent, bool call_fit, bool set_sizer )
{
    wxBoxSizer *item0 = new wxBoxSizer( wxVERTICAL );

    wxBoxSizer *item1 = new wxBoxSizer( wxHORIZONTAL );

    wxStaticText *item2 = new wxStaticText( parent, ID_TEXT, _("Tile output file:"), wxDefaultPosition, wxDefaultSize, 0 );
    item1->Add( item2, 0, wxALIGN_CENTER|wxALL, 5 );

    wxTextCtrl *item3 = new wxTextCtrl( parent, ID_TEXT_TO_FOLDER, wxT(""), wxDefaultPosition, wxDefaultSize, 0 );
    item1->Add( item3, 1, wxALIGN_CENTER|wxALL, 5 );

    wxButton *item4 = new wxButton( parent, ID_DOTDOTDOT, _("..."), wxDefaultPosition, wxSize(25,-1), 0 );
    item4->SetFont( wxFont( 11, wxROMAN, wxNORMAL, wxBOLD ) );
    item1->Add( item4, 0, wxALIGN_CENTER|wxALL, 5 );

    item0->Add( item1, 0, wxGROW|wxALIGN_CENTER_VERTICAL, 5 );

    wxBoxSizer *item5 = new wxBoxSizer( wxHORIZONTAL );

    wxStaticText *item6 = new wxStaticText( parent, ID_TEXT, _("Columns"), wxDefaultPosition, wxDefaultSize, 0 );
    item5->Add( item6, 0, wxALIGN_RIGHT|wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    wxTextCtrl *item7 = new wxTextCtrl( parent, ID_COLUMNS, wxT(""), wxDefaultPosition, wxSize(60,-1), 0 );
    item5->Add( item7, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    wxStaticText *item8 = new wxStaticText( parent, ID_TEXT, _("Rows"), wxDefaultPosition, wxDefaultSize, 0 );
    item5->Add( item8, 0, wxALIGN_RIGHT|wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    wxTextCtrl *item9 = new wxTextCtrl( parent, ID_ROWS, wxT(""), wxDefaultPosition, wxSize(60,-1), 0 );
    item5->Add( item9, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    item0->Add( item5, 0, wxALIGN_CENTER, 5 );

    wxBoxSizer *item10 = new wxBoxSizer( wxHORIZONTAL );

    wxStaticText *item11 = new wxStaticText( parent, ID_TEXT, _("LOD 0 Size:"), wxDefaultPosition, wxDefaultSize, 0 );
    item10->Add( item11, 0, wxALIGN_RIGHT|wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    wxString *strs12 = (wxString*) NULL;
    wxChoice *item12 = new wxChoice( parent, ID_CHOICE_LOD0_SIZE, wxDefaultPosition, wxSize(100,-1), 0, strs12, 0 );
    item10->Add( item12, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    item0->Add( item10, 0, wxALIGN_CENTER, 5 );

    wxBoxSizer *item13 = new wxBoxSizer( wxHORIZONTAL );

    wxStaticText *item14 = new wxStaticText( parent, ID_TEXT, _("Number of LODs:"), wxDefaultPosition, wxDefaultSize, 0 );
    item13->Add( item14, 0, wxALIGN_CENTER|wxALL, 5 );

    wxSpinCtrl *item15 = new wxSpinCtrl( parent, ID_SPIN_NUM_LODS, wxT("3"), wxDefaultPosition, wxSize(60,-1), 0, 1, 8, 3 );
    item13->Add( item15, 0, wxALIGN_CENTER|wxALL, 5 );

    item0->Add( item13, 0, wxALIGN_CENTER, 5 );

    wxStaticBox *item17 = new wxStaticBox( parent, -1, _("Information") );
    wxStaticBoxSizer *item16 = new wxStaticBoxSizer( item17, wxVERTICAL );

    wxBoxSizer *item18 = new wxBoxSizer( wxHORIZONTAL );

    wxStaticText *item19 = new wxStaticText( parent, ID_TEXT, _("Total size of all tiles:"), wxDefaultPosition, wxDefaultSize, 0 );
    item18->Add( item19, 0, wxALIGN_CENTER|wxALL, 5 );

    wxTextCtrl *item20 = new wxTextCtrl( parent, ID_TOTALX, wxT(""), wxDefaultPosition, wxSize(60,-1), wxTE_READONLY );
    item18->Add( item20, 0, wxALIGN_CENTER|wxALL, 5 );

    wxTextCtrl *item21 = new wxTextCtrl( parent, ID_TOTALY, wxT(""), wxDefaultPosition, wxSize(60,-1), wxTE_READONLY );
    item18->Add( item21, 0, wxALIGN_CENTER|wxALL, 5 );

    item16->Add( item18, 0, wxALIGN_CENTER_VERTICAL, 5 );

    wxBoxSizer *item22 = new wxBoxSizer( wxHORIZONTAL );

    wxStaticText *item23 = new wxStaticText( parent, ID_TEXT, _("Size of sample area:"), wxDefaultPosition, wxDefaultSize, 0 );
    item22->Add( item23, 0, wxALIGN_CENTER|wxALL, 5 );

    wxTextCtrl *item24 = new wxTextCtrl( parent, ID_AREAX, wxT(""), wxDefaultPosition, wxSize(80,-1), wxTE_READONLY );
    item22->Add( item24, 1, wxALIGN_CENTER|wxALL, 5 );

    wxTextCtrl *item25 = new wxTextCtrl( parent, ID_AREAY, wxT(""), wxDefaultPosition, wxSize(80,-1), wxTE_READONLY );
    item22->Add( item25, 1, wxALIGN_CENTER|wxALL, 5 );

    item16->Add( item22, 0, wxGROW|wxALIGN_CENTER_VERTICAL, 5 );

    wxFlexGridSizer *item26 = new wxFlexGridSizer( 3, 0, 0 );

    wxStaticText *item27 = new wxStaticText( parent, ID_TEXT, _("Spacing of existing data:"), wxDefaultPosition, wxDefaultSize, 0 );
    item26->Add( item27, 0, wxALIGN_RIGHT|wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    wxTextCtrl *item28 = new wxTextCtrl( parent, ID_ESTX, wxT(""), wxDefaultPosition, wxDefaultSize, wxTE_READONLY );
    item26->Add( item28, 0, wxGROW|wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    wxTextCtrl *item29 = new wxTextCtrl( parent, ID_ESTY, wxT(""), wxDefaultPosition, wxDefaultSize, wxTE_READONLY );
    item26->Add( item29, 0, wxGROW|wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    wxStaticText *item30 = new wxStaticText( parent, ID_TEXT, _("Spacing of LOD 0:"), wxDefaultPosition, wxDefaultSize, 0 );
    item26->Add( item30, 0, wxALIGN_RIGHT|wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    wxTextCtrl *item31 = new wxTextCtrl( parent, ID_CURX, wxT(""), wxDefaultPosition, wxSize(60,-1), wxTE_READONLY );
    item26->Add( item31, 0, wxGROW|wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    wxTextCtrl *item32 = new wxTextCtrl( parent, ID_CURY, wxT(""), wxDefaultPosition, wxSize(60,-1), wxTE_READONLY );
    item26->Add( item32, 0, wxGROW|wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    item16->Add( item26, 1, wxGROW|wxALIGN_CENTER_VERTICAL, 5 );

    item0->Add( item16, 0, wxGROW|wxALIGN_CENTER_VERTICAL|wxLEFT|wxRIGHT|wxBOTTOM, 5 );

    wxBoxSizer *item33 = new wxBoxSizer( wxVERTICAL );

    wxCheckBox *item34 = new wxCheckBox( parent, ID_OMIT_FLAT, _("Omit flat elevation tiles (sea level)"), wxDefaultPosition, wxDefaultSize, 0 );
    item33->Add( item34, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    wxStaticBox *item36 = new wxStaticBox( parent, -1, _("Texture Compression") );
    wxStaticBoxSizer *item35 = new wxStaticBoxSizer( item36, wxVERTICAL );

    wxRadioButton *item37 = new wxRadioButton( parent, ID_TC_NONE, _("None"), wxDefaultPosition, wxDefaultSize, wxRB_GROUP );
    item37->SetValue( TRUE );
    item35->Add( item37, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    wxRadioButton *item38 = new wxRadioButton( parent, ID_TC_OGL, _("OpenGL"), wxDefaultPosition, wxDefaultSize, 0 );
    item35->Add( item38, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    wxRadioButton *item39 = new wxRadioButton( parent, ID_TC_SQUISH_FAST, _("Squish fast"), wxDefaultPosition, wxDefaultSize, 0 );
    item35->Add( item39, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    wxRadioButton *item40 = new wxRadioButton( parent, ID_TC_SQUISH_SLOW, _("Squish slow (6x slower, slightly fewer artifacts)"), wxDefaultPosition, wxDefaultSize, 0 );
    item35->Add( item40, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    item33->Add( item35, 0, wxALIGN_CENTER|wxALL, 5 );

    item0->Add( item33, 0, wxALIGN_CENTER, 5 );

    wxBoxSizer *item41 = new wxBoxSizer( wxHORIZONTAL );

    wxButton *item42 = new wxButton( parent, wxID_OK, _("OK"), wxDefaultPosition, wxDefaultSize, 0 );
    item41->Add( item42, 0, wxALIGN_CENTER|wxALL, 5 );

    wxButton *item43 = new wxButton( parent, wxID_CANCEL, _("Cancel"), wxDefaultPosition, wxDefaultSize, 0 );
    item41->Add( item43, 0, wxALIGN_CENTER|wxALL, 5 );

    item0->Add( item41, 0, wxALIGN_CENTER, 5 );

    if (set_sizer)
    {
        parent->SetSizer( item0 );
        if (call_fit)
            item0->SetSizeHints( parent );
    }
    
    return item0;
}

wxSizer *RenderOptionsDialogFunc( wxWindow *parent, bool call_fit, bool set_sizer )
{
    wxBoxSizer *item0 = new wxBoxSizer( wxVERTICAL );

    wxStaticBox *item2 = new wxStaticBox( parent, -1, _("Colors") );
    wxStaticBoxSizer *item1 = new wxStaticBoxSizer( item2, wxHORIZONTAL );

    wxStaticText *item3 = new wxStaticText( parent, ID_TEXT, _("Color map file:"), wxDefaultPosition, wxDefaultSize, 0 );
    item1->Add( item3, 0, wxALL, 5 );

    wxBoxSizer *item4 = new wxBoxSizer( wxVERTICAL );

    wxString *strs5 = (wxString*) NULL;
    wxChoice *item5 = new wxChoice( parent, ID_CHOICE_COLORS, wxDefaultPosition, wxSize(180,-1), 0, strs5, 0 );
    item4->Add( item5, 0, wxGROW|wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    wxButton *item6 = new wxButton( parent, ID_EDIT_COLORS, _("Edit Colors..."), wxDefaultPosition, wxDefaultSize, 0 );
    item4->Add( item6, 0, wxALIGN_CENTER_VERTICAL|wxLEFT|wxRIGHT|wxBOTTOM, 5 );

    item1->Add( item4, 1, wxALIGN_CENTER, 5 );

    item0->Add( item1, 0, wxGROW|wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    wxStaticBox *item8 = new wxStaticBox( parent, -1, _("Shading") );
    wxStaticBoxSizer *item7 = new wxStaticBoxSizer( item8, wxHORIZONTAL );

    wxBoxSizer *item9 = new wxBoxSizer( wxVERTICAL );

    wxRadioButton *item10 = new wxRadioButton( parent, ID_RADIO_SHADING_NONE, _("None"), wxDefaultPosition, wxDefaultSize, wxRB_GROUP );
    item9->Add( item10, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    wxRadioButton *item11 = new wxRadioButton( parent, ID_RADIO_SHADING_QUICK, _("Quick (East-West)"), wxDefaultPosition, wxDefaultSize, 0 );
    item9->Add( item11, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    wxRadioButton *item12 = new wxRadioButton( parent, ID_RADIO_SHADING_DOT, _("Dot-product with surface"), wxDefaultPosition, wxDefaultSize, 0 );
    item9->Add( item12, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    wxFlexGridSizer *item13 = new wxFlexGridSizer( 3, 0, 0 );

    item13->Add( 20, 20, 0, wxALIGN_CENTER|wxALL, 5 );

    wxStaticText *item14 = new wxStaticText( parent, ID_TEXT, _("Angle (0-90):"), wxDefaultPosition, wxDefaultSize, 0 );
    item13->Add( item14, 0, wxALIGN_RIGHT|wxALL, 5 );

    wxSpinCtrl *item15 = new wxSpinCtrl( parent, ID_SPIN_CAST_ANGLE, wxT("45"), wxDefaultPosition, wxSize(70,-1), 0, 0, 90, 45 );
    item13->Add( item15, 0, wxALIGN_CENTER_VERTICAL|wxLEFT|wxRIGHT|wxBOTTOM, 5 );

    item13->Add( 20, 20, 0, wxALIGN_CENTER|wxALL, 5 );

    wxStaticText *item16 = new wxStaticText( parent, ID_TEXT, _("Direction (0-360):"), wxDefaultPosition, wxDefaultSize, 0 );
    item13->Add( item16, 0, wxALIGN_RIGHT|wxALL, 5 );

    wxSpinCtrl *item17 = new wxSpinCtrl( parent, ID_SPIN_CAST_DIRECTION, wxT("45"), wxDefaultPosition, wxSize(70,-1), 0, 0, 360, 45 );
    item13->Add( item17, 0, wxALIGN_CENTER_VERTICAL|wxLEFT|wxRIGHT|wxBOTTOM, 5 );

    item13->Add( 20, 20, 0, wxALIGN_CENTER|wxALL, 5 );

    wxStaticText *item18 = new wxStaticText( parent, ID_TEXT, _("Ambient light (0-1):"), wxDefaultPosition, wxDefaultSize, 0 );
    item13->Add( item18, 0, wxALIGN_RIGHT|wxALL, 5 );

    wxTextCtrl *item19 = new wxTextCtrl( parent, ID_AMBIENT, wxT(""), wxDefaultPosition, wxSize(80,-1), 0 );
    item13->Add( item19, 0, wxALIGN_CENTER|wxLEFT|wxRIGHT|wxBOTTOM, 5 );

    item13->Add( 20, 20, 0, wxALIGN_CENTER|wxALL, 5 );

    wxStaticText *item20 = new wxStaticText( parent, ID_TEXT, _("Gamma (0-1):"), wxDefaultPosition, wxDefaultSize, 0 );
    item13->Add( item20, 0, wxALIGN_RIGHT|wxALL, 5 );

    wxTextCtrl *item21 = new wxTextCtrl( parent, ID_GAMMA, wxT(""), wxDefaultPosition, wxSize(80,-1), 0 );
    item13->Add( item21, 0, wxALIGN_CENTER|wxLEFT|wxRIGHT|wxBOTTOM, 5 );

    item9->Add( item13, 0, wxALIGN_CENTER, 5 );

    wxCheckBox *item22 = new wxCheckBox( parent, ID_CHECK_SHADOWS, _("Cast Shadows"), wxDefaultPosition, wxDefaultSize, 0 );
    item9->Add( item22, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    item7->Add( item9, 0, wxALIGN_CENTER, 5 );

    item0->Add( item7, 0, wxGROW|wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    wxBoxSizer *item23 = new wxBoxSizer( wxHORIZONTAL );

    wxButton *item24 = new wxButton( parent, wxID_OK, _("OK"), wxDefaultPosition, wxDefaultSize, 0 );
    item23->Add( item24, 0, wxALIGN_CENTER|wxALL, 5 );

    wxButton *item25 = new wxButton( parent, wxID_CANCEL, _("Cancel"), wxDefaultPosition, wxDefaultSize, 0 );
    item23->Add( item25, 0, wxALIGN_CENTER|wxALL, 5 );

    item0->Add( item23, 0, wxALIGN_CENTER, 5 );

    if (set_sizer)
    {
        parent->SetSizer( item0 );
        if (call_fit)
            item0->SetSizeHints( parent );
    }
    
    return item0;
}

wxSizer *MatchDialogFunc( wxWindow *parent, bool call_fit, bool set_sizer )
{
    wxBoxSizer *item0 = new wxBoxSizer( wxVERTICAL );

    wxStaticBox *item2 = new wxStaticBox( parent, -1, _("Origin and Size:") );
    wxStaticBoxSizer *item1 = new wxStaticBoxSizer( item2, wxVERTICAL );

    wxFlexGridSizer *item3 = new wxFlexGridSizer( 2, 0, 0 );
    item3->AddGrowableCol( 1 );

    wxStaticText *item4 = new wxStaticText( parent, ID_TEXT, _("Previous:"), wxDefaultPosition, wxDefaultSize, 0 );
    item3->Add( item4, 0, wxALIGN_CENTER|wxALL, 5 );

    wxTextCtrl *item5 = new wxTextCtrl( parent, ID_EXTENT1, wxT(""), wxDefaultPosition, wxSize(280,-1), wxTE_READONLY );
    item3->Add( item5, 1, wxGROW|wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    wxStaticText *item6 = new wxStaticText( parent, ID_TEXT, _("Current:"), wxDefaultPosition, wxDefaultSize, 0 );
    item3->Add( item6, 0, wxALIGN_CENTER|wxALL, 5 );

    wxTextCtrl *item7 = new wxTextCtrl( parent, ID_EXTENT2, wxT(""), wxDefaultPosition, wxSize(280,-1), wxTE_READONLY );
    item3->Add( item7, 1, wxGROW|wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    item1->Add( item3, 0, wxGROW|wxALIGN_CENTER_VERTICAL, 5 );

    item0->Add( item1, 0, wxGROW|wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    wxBoxSizer *item8 = new wxBoxSizer( wxHORIZONTAL );

    wxStaticText *item9 = new wxStaticText( parent, ID_TEXT, _("Match Layer:"), wxDefaultPosition, wxDefaultSize, 0 );
    item8->Add( item9, 0, wxALIGN_CENTER|wxALL, 5 );

    wxString strs10[] = 
    {
        _("ChoiceItem")
    };
    wxChoice *item10 = new wxChoice( parent, ID_MATCH_LAYER, wxDefaultPosition, wxSize(200,-1), 1, strs10, 0 );
    item8->Add( item10, 0, wxALIGN_CENTER|wxALL, 5 );

    item0->Add( item8, 0, wxALIGN_CENTER, 5 );

    wxBoxSizer *item11 = new wxBoxSizer( wxHORIZONTAL );

    wxStaticText *item12 = new wxStaticText( parent, ID_TEXT, _("Layer Resolution:"), wxDefaultPosition, wxDefaultSize, 0 );
    item11->Add( item12, 0, wxALIGN_CENTER|wxALL, 5 );

    wxTextCtrl *item13 = new wxTextCtrl( parent, ID_LAYER_RES, wxT(""), wxDefaultPosition, wxDefaultSize, wxTE_READONLY );
    item11->Add( item13, 0, wxALIGN_CENTER|wxALL, 5 );

    item0->Add( item11, 0, wxALIGN_CENTER, 5 );

    wxBoxSizer *item14 = new wxBoxSizer( wxHORIZONTAL );

    wxStaticText *item15 = new wxStaticText( parent, ID_TEXT, _("Allow area to:"), wxDefaultPosition, wxDefaultSize, 0 );
    item14->Add( item15, 0, wxALIGN_CENTER|wxALL, 5 );

    wxCheckBox *item16 = new wxCheckBox( parent, ID_GROW, _("Grow"), wxDefaultPosition, wxDefaultSize, 0 );
    item14->Add( item16, 0, wxALIGN_CENTER|wxALL, 5 );

    wxCheckBox *item17 = new wxCheckBox( parent, ID_SHRINK, _("Shrink"), wxDefaultPosition, wxDefaultSize, 0 );
    item14->Add( item17, 0, wxALIGN_CENTER|wxALL, 5 );

    item0->Add( item14, 0, wxALIGN_CENTER, 5 );

    wxBoxSizer *item18 = new wxBoxSizer( wxHORIZONTAL );

    wxStaticText *item19 = new wxStaticText( parent, ID_TEXT, _("Tile LOD0 Size:"), wxDefaultPosition, wxDefaultSize, 0 );
    item18->Add( item19, 0, wxALIGN_CENTER|wxALL, 5 );

    wxTextCtrl *item20 = new wxTextCtrl( parent, ID_TILE_SIZE, wxT(""), wxDefaultPosition, wxDefaultSize, wxTE_READONLY );
    item18->Add( item20, 0, wxALIGN_CENTER|wxALL, 5 );

    wxSpinButton *item21 = new wxSpinButton( parent, ID_SIZE_SPIN, wxDefaultPosition, wxSize(-1,26), 0 );
    item21->SetRange( 0, 100 );
    item21->SetValue( 0 );
    item18->Add( item21, 0, wxALIGN_CENTER|wxRIGHT, 5 );

    item0->Add( item18, 0, wxALIGN_CENTER, 5 );

    wxBoxSizer *item22 = new wxBoxSizer( wxHORIZONTAL );

    wxStaticText *item23 = new wxStaticText( parent, ID_TEXT, _("Tiling:"), wxDefaultPosition, wxDefaultSize, 0 );
    item22->Add( item23, 0, wxALIGN_CENTER|wxALL, 5 );

    wxTextCtrl *item24 = new wxTextCtrl( parent, ID_TILING, wxT(""), wxDefaultPosition, wxDefaultSize, wxTE_READONLY );
    item22->Add( item24, 0, wxALIGN_CENTER|wxALL, 5 );

    item0->Add( item22, 0, wxALIGN_CENTER, 5 );

    wxBoxSizer *item25 = new wxBoxSizer( wxHORIZONTAL );

    wxButton *item26 = new wxButton( parent, wxID_OK, _("OK"), wxDefaultPosition, wxDefaultSize, 0 );
    item25->Add( item26, 0, wxALIGN_CENTER|wxALL, 5 );

    wxButton *item27 = new wxButton( parent, wxID_CANCEL, _("Cancel"), wxDefaultPosition, wxDefaultSize, 0 );
    item25->Add( item27, 0, wxALIGN_CENTER|wxALL, 5 );

    item0->Add( item25, 0, wxALIGN_CENTER, 5 );

    if (set_sizer)
    {
        parent->SetSizer( item0 );
        if (call_fit)
            item0->SetSizeHints( parent );
    }
    
    return item0;
}

wxSizer *PrefDialogFunc( wxWindow *parent, bool call_fit, bool set_sizer )
{
    wxBoxSizer *item0 = new wxBoxSizer( wxVERTICAL );

    wxStaticBox *item2 = new wxStaticBox( parent, -1, _("When importing data that lacks a CRS:") );
    wxStaticBoxSizer *item1 = new wxStaticBoxSizer( item2, wxVERTICAL );

    wxRadioButton *item3 = new wxRadioButton( parent, ID_RADIO1, _("Use the current CRS"), wxDefaultPosition, wxDefaultSize, wxRB_GROUP );
    item1->Add( item3, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    wxRadioButton *item4 = new wxRadioButton( parent, ID_RADIO2, _("Ask"), wxDefaultPosition, wxDefaultSize, 0 );
    item1->Add( item4, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    item0->Add( item1, 0, wxGROW|wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    wxStaticBox *item6 = new wxStaticBox( parent, -1, _("When loading an image which is very large:") );
    wxStaticBoxSizer *item5 = new wxStaticBoxSizer( item6, wxVERTICAL );

    wxRadioButton *item7 = new wxRadioButton( parent, ID_RADIO3, _("Load it into memory"), wxDefaultPosition, wxDefaultSize, wxRB_GROUP );
    item5->Add( item7, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    wxRadioButton *item8 = new wxRadioButton( parent, ID_RADIO4, _("Use out-of-core access"), wxDefaultPosition, wxSize(220,-1), 0 );
    item5->Add( item8, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    wxRadioButton *item9 = new wxRadioButton( parent, ID_RADIO5, _("Ask"), wxDefaultPosition, wxDefaultSize, 0 );
    item5->Add( item9, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    wxBoxSizer *item10 = new wxBoxSizer( wxHORIZONTAL );

    wxStaticText *item11 = new wxStaticText( parent, ID_TEXT, _("Large image is more than:"), wxDefaultPosition, wxDefaultSize, 0 );
    item10->Add( item11, 0, wxALIGN_CENTER|wxALL, 5 );

    wxTextCtrl *item12 = new wxTextCtrl( parent, ID_MAX_MEGAPIXELS, wxT(""), wxDefaultPosition, wxSize(32,-1), 0 );
    item10->Add( item12, 0, wxALIGN_CENTER|wxTOP|wxBOTTOM, 5 );

    wxStaticText *item13 = new wxStaticText( parent, ID_TEXT, _("megapixels"), wxDefaultPosition, wxDefaultSize, 0 );
    item10->Add( item13, 0, wxALIGN_CENTER|wxALL, 5 );

    item5->Add( item10, 0, wxALIGN_CENTER|wxALL, 0 );

    item0->Add( item5, 0, wxGROW|wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    wxStaticBox *item15 = new wxStaticBox( parent, -1, _("When reprojecting an integer elevation grid:") );
    wxStaticBoxSizer *item14 = new wxStaticBoxSizer( item15, wxVERTICAL );

    wxRadioButton *item16 = new wxRadioButton( parent, ID_RADIO6, _("Leave it as integer"), wxDefaultPosition, wxDefaultSize, wxRB_GROUP );
    item14->Add( item16, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    wxRadioButton *item17 = new wxRadioButton( parent, ID_RADIO7, _("Upgrade it to floating-point values"), wxDefaultPosition, wxSize(220,-1), 0 );
    item14->Add( item17, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    wxRadioButton *item18 = new wxRadioButton( parent, ID_RADIO8, _("Ask"), wxDefaultPosition, wxDefaultSize, 0 );
    item14->Add( item18, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    item0->Add( item14, 0, wxGROW|wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    wxStaticBox *item20 = new wxStaticBox( parent, -1, _("Filling unknown areas of elevation grids:") );
    wxStaticBoxSizer *item19 = new wxStaticBoxSizer( item20, wxVERTICAL );

    wxRadioButton *item21 = new wxRadioButton( parent, ID_RADIO9, _("Fast"), wxDefaultPosition, wxDefaultSize, wxRB_GROUP );
    item19->Add( item21, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    wxRadioButton *item22 = new wxRadioButton( parent, ID_RADIO10, _("Slow and smooth"), wxDefaultPosition, wxSize(220,-1), 0 );
    item19->Add( item22, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    item0->Add( item19, 0, wxGROW|wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    wxBoxSizer *item23 = new wxBoxSizer( wxHORIZONTAL );

    wxStaticText *item24 = new wxStaticText( parent, ID_TEXT, _("Imagery: N > 1 for NxN multisampling"), wxDefaultPosition, wxDefaultSize, 0 );
    item23->Add( item24, 0, wxALIGN_CENTER|wxALL, 5 );

    wxTextCtrl *item25 = new wxTextCtrl( parent, ID_SAMPLING_N, wxT(""), wxDefaultPosition, wxSize(40,-1), 0 );
    item23->Add( item25, 0, wxALIGN_CENTER|wxALL, 5 );

    item0->Add( item23, 0, wxALIGN_CENTER|wxLEFT|wxRIGHT, 5 );

    wxBoxSizer *item26 = new wxBoxSizer( wxHORIZONTAL );

    wxButton *item27 = new wxButton( parent, wxID_OK, _("OK"), wxDefaultPosition, wxDefaultSize, 0 );
    item26->Add( item27, 0, wxALIGN_CENTER|wxALL, 5 );

    wxButton *item28 = new wxButton( parent, wxID_CANCEL, _("Cancel"), wxDefaultPosition, wxDefaultSize, 0 );
    item26->Add( item28, 0, wxALIGN_CENTER|wxALL, 5 );

    item0->Add( item26, 0, wxALIGN_CENTER|wxBOTTOM, 5 );

    if (set_sizer)
    {
        parent->SetSizer( item0 );
        if (call_fit)
            item0->SetSizeHints( parent );
    }
    
    return item0;
}

// Implement menubar functions

// Implement toolbar functions

void MainToolBarFunc( wxToolBar *parent )
{
    parent->SetMargins( 2, 2 );
    
    parent->AddTool( ID_VIEW_LAYER_UP, wxT(""), ToolBitmapsFunc( 0 ), wxNullBitmap, wxITEM_NORMAL, wxT("") );
    parent->AddTool( ID_VIEW_LAYER_DOWN, wxT(""), ToolBitmapsFunc( 1 ), wxNullBitmap, wxITEM_NORMAL, wxT("") );
    
    parent->Realize();
}

// Implement bitmap functions

wxBitmap MyBitmapsFunc( size_t index )
{
    if (index == 0)
    {
        /* XPM */
        static const char *xpm_data[] = {
        /* columns rows colors chars-per-pixel */
        "32 18 5 1",
        "a c Black",
        "b c #FFFFFF",
        "c c #FF0000",
        "d c #0000FF",
        "e c #00FF00",
        /* pixels */
        "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa",
        "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa",
        "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa",
        "aaaabaaaaaabaaaaaaaabaabaaaaaaaa",
        "aaaabaaaaabaaaaaaaaabaabaaaaaaaa",
        "aaaabaaaaabaaaaaaaaabaabaaaaaaaa",
        "aaaabaaabbbbaaaaaaaababbbaaaaaaa",
        "aaaabaaaaabaaaaaaaaabaabaaaaaaaa",
        "aaabbaabbabaabbabababaabaaaabaaa",
        "aababababababababababaabaaabbbaa",
        "aababababababababababaabaabbbbba",
        "aabababbaababababababaabaaabbbaa",
        "aabababaaababababababaabaaaabaaa",
        "aaabbaabbabaabababaabaabaaaaaaaa",
        "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa",
        "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa",
        "aaccccccccaaeeeeeeeeaadddddddaaa",
        "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"
        };
        wxBitmap bitmap( xpm_data );
        return bitmap;
    }
    if (index == 1)
    {
        /* XPM */
        static const char *xpm_data[] = {
        /* columns rows colors chars-per-pixel */
        "32 18 2 1",
        "a c Black",
        "b c #FFFFFF",
        /* pixels */
        "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa",
        "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa",
        "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa",
        "aaaaaaaaabaaaaaaaaaaaaaaaaaaaaaa",
        "aaaaaaaaabaaaaaaaaaaaaaaaaaaaaaa",
        "aaaaaaaaabaaaaaaaaaaaaaaaaaaaaaa",
        "aaaaaaaaabaaaaaaaaaaaaaaaaaaaaaa",
        "abababbaabababbaaabaababababbaaa",
        "abababababbaabababababababababaa",
        "abababababababababababababababaa",
        "abababababababababababababababaa",
        "aabbababababababaabaaababaababaa",
        "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa",
        "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa",
        "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa",
        "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa",
        "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa",
        "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"
        };
        wxBitmap bitmap( xpm_data );
        return bitmap;
    }
    return wxNullBitmap;
}

wxBitmap ToolBitmapsFunc( size_t index )
{
    if (index == 0)
    {
        /* XPM */
        static const char *xpm_data[] = {
        /* columns rows colors chars-per-pixel */
        "20 20 3 1",
        "  c None",
        "a c Black",
        "b c #808080",
        /* pixels */
        "                    ",
        "                    ",
        "                    ",
        "        baab        ",
        "        baab        ",
        "       baaaab       ",
        "       baaaab       ",
        "      baa  aab      ",
        "      baa  aab      ",
        "     baa    aab     ",
        "     baa    aab     ",
        "    baa      aab    ",
        "    baa      aab    ",
        "   baa        aab   ",
        "   baa        aab   ",
        "                    ",
        "                    ",
        "                    ",
        "                    ",
        "                    "
        };
        wxBitmap bitmap( xpm_data );
        return bitmap;
    }
    if (index == 1)
    {
        /* XPM */
        static const char *xpm_data[] = {
        /* columns rows colors chars-per-pixel */
        "20 20 3 1",
        "  c None",
        "a c Black",
        "b c #808080",
        /* pixels */
        "                    ",
        "                    ",
        "                    ",
        "                    ",
        "                    ",
        "   baa        aab   ",
        "   baa        aab   ",
        "    baa      aab    ",
        "    baa      aab    ",
        "     baa    aab     ",
        "     baa    aab     ",
        "      baa  aab      ",
        "      baa  aab      ",
        "       baaaab       ",
        "       baaaab       ",
        "        baab        ",
        "        baab        ",
        "                    ",
        "                    ",
        "                    "
        };
        wxBitmap bitmap( xpm_data );
        return bitmap;
    }
    return wxNullBitmap;
}


// End of generated file
